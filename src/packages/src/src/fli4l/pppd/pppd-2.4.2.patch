diff -urN ppp-orig/pppd/Makefile.linux ppp/pppd/Makefile.linux
--- ppp-orig/pppd/Makefile.linux	2005-05-09 11:00:02.000000000 +0200
+++ ppp/pppd/Makefile.linux	2005-05-09 11:13:18.000000000 +0200
@@ -49,6 +49,11 @@
 # and that the kernel driver support PPP packet filtering.
 FILTER=y
 
+# Uncomment the next line to include support for PPP packet filtering
+# using precompiled filter expressions.  This requires the kernel driver
+# supports PPP packet filtering.  
+# PRECOMPILED_FILTER=y
+
 # Uncomment the next line to enable multilink PPP (enabled by default)
 # Linux distributions: Please leave multilink ENABLED in your builds
 # of pppd!
@@ -200,6 +205,13 @@
 CFLAGS  += -DPPP_FILTER -I/usr/include/pcap
 endif
 
+ifdef PRECOMPILED_FILTER
+PPPDSRCS += pcf.c
+HEADERS  += pcf.h
+PPPDOBJS += pcf.o
+CFLAGS  += -DPPP_PRECOMPILED_FILTER
+endif
+
 ifdef HAVE_INET6
      PPPDSRCS += ipv6cp.c eui64.c
      HEADERS  += ipv6cp.h eui64.h
diff -urN ppp-orig/pppd/demand.c ppp/pppd/demand.c
--- ppp-orig/pppd/demand.c	2005-05-09 11:00:01.000000000 +0200
+++ ppp/pppd/demand.c	2005-05-09 11:05:28.000000000 +0200
@@ -57,6 +57,9 @@
 #include <net/bpf.h>
 #include <pcap.h>
 #endif
+#ifdef PPP_PRECOMPILED_FILTER
+#include "pcf.h"
+#endif
 
 #include "pppd.h"
 #include "fsm.h"
@@ -113,6 +116,9 @@
 #ifdef PPP_FILTER
     set_filters(&pass_filter, &active_filter);
 #endif
+#ifdef PPP_PRECOMPILED_FILTER
+    set_precompiled_filters();
+#endif
 
     /*
      * Call the demand_conf procedure for each protocol that's got one.
diff -urN ppp-orig/pppd/lcp.c ppp/pppd/lcp.c
--- ppp-orig/pppd/lcp.c	2003-07-28 14:30:20.000000000 +0200
+++ ppp/pppd/lcp.c	2005-05-09 11:05:28.000000000 +0200
@@ -1893,10 +1893,11 @@
      */
     mtu = ho->neg_mru? ho->mru: PPP_MRU;
     mru = go->neg_mru? MAX(wo->mru, go->mru): PPP_MRU;
+    mtu = MIN(MIN(mtu, mru), ao->mru);
 #ifdef HAVE_MULTILINK
     if (!(multilink && go->neg_mrru && ho->neg_mrru))
 #endif /* HAVE_MULTILINK */
-	netif_set_mtu(f->unit, MIN(MIN(mtu, mru), ao->mru));
+	netif_set_mtu(f->unit, mtu);
     ppp_send_config(f->unit, mtu,
 		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 		    ho->neg_pcompression, ho->neg_accompression);
diff -urN ppp-orig/pppd/options.c ppp/pppd/options.c
--- ppp-orig/pppd/options.c	2005-05-09 11:00:01.000000000 +0200
+++ ppp/pppd/options.c	2005-05-09 11:05:28.000000000 +0200
@@ -59,6 +59,10 @@
 #include <pcap-int.h>	/* XXX: To get struct pcap */
 #endif
 
+#ifdef PPP_PRECOMPILED_FILTER
+#include "pcf.h"
+#endif
+
 #include "pppd.h"
 #include "pathnames.h"
 
@@ -150,6 +154,11 @@
 static int loadplugin __P((char **));
 #endif
 
+#ifdef PPP_PRECOMPILED_FILTER
+static int setprecompiledpassfilter __P((char **));
+static int setprecompiledactivefilter __P((char **));
+#endif
+
 #ifdef PPP_FILTER
 static int setpassfilter __P((char **));
 static int setactivefilter __P((char **));
@@ -305,6 +314,14 @@
       "set filter for active pkts", OPT_PRIO },
 #endif
 
+#ifdef PPP_PRECOMPILED_FILTER
+    { "precompiled-pass-filter", 1, setprecompiledpassfilter,
+      "set precompiled filter for packets to pass", OPT_PRIO },
+
+    { "precompiled-active-filter", 1, setprecompiledactivefilter,
+      "set precompiled filter for active pkts", OPT_PRIO },
+#endif
+
 #ifdef MAXOCTETS
     { "maxoctets", o_int, &maxoctets,
       "Set connection traffic limit",
@@ -1457,6 +1474,30 @@
     return ok;
 }
 
+#ifdef PPP_PRECOMPILED_FILTER
+/*
+ * setprecompiledpassfilter - Set the pass filter for packets using a
+ * precompiled expression
+ */
+static int
+setprecompiledpassfilter(argv)
+    char **argv;
+{
+    return read_precompiled_passive_filter (*argv);
+}
+
+/*
+ * setprecompiledactivefilter - Set the active filter for packets using a
+ * precompiled expression
+ */
+static int
+setprecompiledactivefilter(argv)
+    char **argv;
+{
+    return read_precompiled_active_filter (*argv);
+}
+#endif
+
 #ifdef PPP_FILTER
 /*
  * setpassfilter - Set the pass filter for packets
diff -urN ppp-orig/pppd/pcf.c ppp/pppd/pcf.c
--- ppp-orig/pppd/pcf.c	1970-01-01 01:00:00.000000000 +0100
+++ ppp/pppd/pcf.c	2005-05-09 11:05:28.000000000 +0200
@@ -0,0 +1,116 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#include <sys/ioctl.h>
+
+#if __GLIBC__ >= 2
+#include <asm/types.h>		/* glibc 2 conflicts with linux/types.h */
+#include <net/if.h>
+#else
+#include <linux/types.h>
+#include <linux/if.h>
+#endif
+
+#include <linux/filter.h>
+#include <linux/ppp_defs.h>
+#include <linux/if_ppp.h>
+
+#include "pppd.h"
+#include "pcf.h"
+
+struct sock_fprog active_filter;
+struct sock_fprog passive_filter;
+
+int read_precompiled (const char * fname, struct sock_fprog *p)
+{
+    char buf[128];
+    int line = 0, size = 0, index=0, ret=1;
+    FILE *f = fopen (fname, "r");
+    if (!f)
+    {
+       option_error("error opening precompiled active-filter '%s': %s",
+                    fname, strerror (errno));
+       return 0;
+    }
+    while (fgets (buf, 127, f))
+    {
+       line++;
+       if (*buf == '#')
+           continue;
+       if (size)
+       {
+           /*
+             struct bpf_insn {
+             u_short   code;
+             u_char    jt;
+             u_char    jf;
+             bpf_int32 k;
+             }
+           */
+           struct sock_filter * insn = & p->filter[index];
+           unsigned code, jt, jf, k;
+           if (sscanf (buf, "%u %u %u %u", &code, &jt, &jf, &k) != 4)
+           {
+               goto err;
+           }
+           insn->code = code;
+           insn->jt = jt;
+           insn->jf = jf;
+           insn->k  = k;
+           index++;
+       }
+       else
+       {
+           if (sscanf (buf, "%u", &size) != 1)
+           {
+               goto err;
+           }
+           p->len = size;
+           p->filter = (struct sock_filter *) 
+               malloc (size * sizeof (struct sock_filter));
+       }
+    } 
+    if (size != index)
+    {
+       option_error("error in precompiled filter,"
+                    " expected %d expressions, got %dn",
+                    size, index);
+       ret = 0;
+    }
+    fclose(f);
+    return ret;
+
+err:
+  option_error("error in precompiled filter"
+              " expression line %s:%d (wrong size)\n", 
+              fname, line);
+  fclose (f);
+  return 0;
+}
+
+int set_precompiled_filter (struct sock_fprog * fp, int op, char * err_msg)
+{
+  extern int ppp_dev_fd;
+  if (fp->len) {
+    if (ioctl(ppp_dev_fd, op, fp) < 0) {
+      if (errno == ENOTTY)
+	warn("kernel does not support PPP filtering");
+      else
+	error(err_msg);
+      return 0;
+    }
+  }
+  return 1;
+}
+
+int set_precompiled_filters (void)
+{
+  return 
+    set_precompiled_filter (&passive_filter, PPPIOCSPASS,
+			    "Couldn't set passive filter in kernel: %m") &&
+    set_precompiled_filter (&active_filter, PPPIOCSACTIVE,
+			    "Couldn't set acive filter in kernel: %m");
+}
+    
diff -urN ppp-orig/pppd/pcf.h ppp/pppd/pcf.h
--- ppp-orig/pppd/pcf.h	1970-01-01 01:00:00.000000000 +0100
+++ ppp/pppd/pcf.h	2005-05-09 11:05:28.000000000 +0200
@@ -0,0 +1,19 @@
+#ifndef PCF_PCC_H
+#define PCF_PCC_H
+
+extern struct sock_fprog active_filter;
+extern struct sock_fprog passive_filter;
+int read_precompiled (const char * fname, struct sock_fprog *p);
+int set_precompiled_filters (void);
+
+extern inline
+int read_precompiled_active_filter (const char * fname)
+{
+  return read_precompiled (fname, &active_filter);
+}
+extern inline
+int read_precompiled_passive_filter (const char * fname)
+{
+  return read_precompiled (fname, &passive_filter);
+}
+#endif /* PCF_PCC_H */
