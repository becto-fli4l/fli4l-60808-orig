/*****************************************************************************
 *  @file src/fli4ld/daemon/PluginManager.hh
 *  fli4ld: Manages plug-ins.
 *
 *  Copyright (c) 2015 - fli4l-Team <team@fli4l.de>
 *
 *  This file is part of fli4l.
 *
 *  fli4l is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  fli4l is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with fli4l.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Last Update: $Id$
 *****************************************************************************
 */

#ifndef FLI4LD_DAEMON_PLUGIN_MANAGER_H_
#define FLI4LD_DAEMON_PLUGIN_MANAGER_H_

#include <fli4ld/daemon/API.hh>
#include <fli4ld/plugin/API.hh>
#include <memory>
#include <list>
#include <exception>

namespace fli4ld {
namespace daemon {

/**
 * Manages plug-ins by loading, initializing, and unloading plug-in libraries.
 */
class PluginManager final {
public :
	/**
	 * Encapsulates exceptions generated by PluginManager.
	 */
	class Exception : public std::exception {
	public :
		/**
		 * @return The exception message.
		 */
		virtual const char* what() const noexcept = 0;
	};

	/**
	 * Thrown if loading a plug-in fails.
	 */
	class LoadingPluginFailed final : public Exception {
	public :
		/**
		 * Creates a LoadingPluginFailed exception.
		 *
		 * @param libName The name of the plug-in library to load.
		 * @param reason The reason why loading the plug-in failed.
		 */
		LoadingPluginFailed(std::string const &libName, std::string const &reason);

		/**
		 * @return The exception message.
		 */
		virtual const char* what() const noexcept override {
			return m_message.c_str();
		}

	private :
		std::string m_message; ///< The exception message.
	};

	/**
	 * Creates a PluginManager.
	 *
	 * @param fli4ld The fli4ld API to be used by the plug-ins.
	 */
	PluginManager(Fli4ldMin &fli4ld);

	/**
	 * Loads a single plug-in.
	 *
	 * @param libName The name of the library containing the plug-in. If this
	 * is only a file name rather than a path, the plug-in is searched within
	 * the system's PATH only.
	 *
	 * @return A Plugin object created by the plug-in or an empty pointer
	 * if the plug-in library is incompatible in some way.
	 *
	 * @throws LoadingPluginFailed if loading the plug-in library fails for
	 * some reason.
	 */
	std::shared_ptr<plugin::PluginMin> load(std::string const &libName);

private :
	class LibHandle;
	class PluginWrapper;

	struct FuncGetProvidedPluginAPIVersion;
	struct FuncGetRequiredFli4ldAPIVersion;
	struct FuncCreatePluginObject;

	/// Type of a container of plug-ins.
	typedef std::list<std::shared_ptr<PluginWrapper>> Plugins;

	/// The fli4ld API to be used by the plug-ins.
	Fli4ldMin &m_fli4ld;
	/// Contains all plug-ins successfully loaded.
	Plugins m_plugins;

	/**
	 * Loads an exported function from a library. If the function does not
	 * exist, an exception of type LoadingPluginFailed is thrown.
	 *
	 * @tparam F
	 * The type of a function descriptor. This type needs to contain an inner
	 * type "Type" which describes the function's type, and a static member
	 * "sm_name" which defines the function's name.
	 *
	 * @param libName
	 * The name of the loaded library. This string is used for creating the
	 * exception message only.
	 *
	 * @param libHandle
	 * The handle to the loaded library.
	 *
	 * @return
	 * A pointer to the exported function.
	 *
	 * @throws LoadingPluginFailed
	 * if the function is not part of the library.
	 */
	template<typename F>
	typename F::Type *getExportedFunction(
			std::string const &libName,
			std::shared_ptr<LibHandle> libHandle
	);
};

} // daemon
} // fli4ld

#endif
