From: Dave Stevenson <dave.stevenson@raspberrypi.org>
Date: Mon, 29 Oct 2018 14:21:04 +0000
Subject: staging: bcm2835-camera: Ensure H264 header bytes get a sensible
 timestamp

H264 header come from VC with 0 timestamps, which means they get a
strange timestamp when processed with VC/kernel start times,
particularly if used with the inline header option.
Remember the last frame timestamp and use that if set, or otherwise
use the kernel start time.

https://github.com/raspberrypi/linux/issues/1836

Signed-off-by: Dave Stevenson <dave.stevenson@raspberrypi.org>
---
 .../bcm2835-camera/bcm2835-camera.c           | 28 +++++++++++++++++--
 .../bcm2835-camera/bcm2835-camera.h           |  2 ++
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
index 1ef31a984741..ed0309c9f23c 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
+++ b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
@@ -367,7 +367,12 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 		return;
 	}
 
-	if (dev->capture.vc_start_timestamp != -1 && pts) {
+	if (dev->capture.vc_start_timestamp == -1) {
+		buf->vb.vb2_buf.timestamp = ktime_get_ns();
+		v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
+			"Buffer time set as current time - %lld",
+			buf->vb.vb2_buf.timestamp);
+	} else if (mmal_buf->pts != 0) {
 		ktime_t timestamp;
 		s64 runtime_us = pts -
 		    dev->capture.vc_start_timestamp;
@@ -380,8 +385,23 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 			 ktime_to_ns(timestamp));
 		buf->vb.vb2_buf.timestamp = ktime_to_ns(timestamp);
 	} else {
-		buf->vb.vb2_buf.timestamp = ktime_get_ns();
+		if (dev->capture.last_timestamp) {
+			buf->vb.vb2_buf.timestamp =
+				dev->capture.last_timestamp;
+			v4l2_dbg(1, bcm2835_v4l2_debug,
+				&dev->v4l2_dev,
+				"Buffer time set as last timestamp - %lld",
+				buf->vb.vb2_buf.timestamp);
+		} else {
+			buf->vb.vb2_buf.timestamp =
+				ktime_to_ns(dev->capture.kernel_start_ts);
+			v4l2_dbg(1, bcm2835_v4l2_debug,
+				&dev->v4l2_dev,
+				"Buffer time set as start timestamp - %lld",
+				buf->vb.vb2_buf.timestamp);
+		}
 	}
+	dev->capture.last_timestamp = buf->vb.vb2_buf.timestamp;
 	buf->vb.sequence = dev->capture.sequence++;
 	buf->vb.field = V4L2_FIELD_NONE;
 
@@ -389,6 +409,9 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 	if (mmal_flags & MMAL_BUFFER_HEADER_FLAG_KEYFRAME)
 		buf->vb.flags |= V4L2_BUF_FLAG_KEYFRAME;
 
+	v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
+		"Buffer has ts %llu",
+		dev->capture.last_timestamp);
 	vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
 
 	if (mmal_flags & MMAL_BUFFER_HEADER_FLAG_EOS &&
@@ -552,6 +575,7 @@ static int start_streaming(struct vb2_queue *vq, unsigned int count)
 	}
 
 	dev->capture.kernel_start_ts = ktime_get();
+	dev->capture.last_timestamp = 0;
 
 	/* enable the camera port */
 	dev->capture.port->cb_ctx = dev;
diff --git a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.h b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.h
index b5fce38de038..dcb1b8e1f4e0 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.h
+++ b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.h
@@ -93,6 +93,8 @@ struct bm2835_mmal_dev {
 		ktime_t kernel_start_ts;
 		/* Sequence number of last buffer */
 		u32		sequence;
+		/* Timestamp of last frame */
+		u64		last_timestamp;
 
 		struct vchiq_mmal_port  *port; /* port being used for capture */
 		/* camera port being used for capture */
