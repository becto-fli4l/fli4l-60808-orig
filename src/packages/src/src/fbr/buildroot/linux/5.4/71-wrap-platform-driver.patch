diff -purN linux-5.3.orig/arch/x86/Kconfig linux-5.3/arch/x86/Kconfig
--- linux-5.3.orig/arch/x86/Kconfig	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/arch/x86/Kconfig	2019-09-17 10:08:16.717890589 +0200
@@ -2774,6 +2774,15 @@ config OLPC_XO15_SCI
 	   - AC adapter status updates
 	   - Battery status updates
 
+config WRAP
+	bool "PC Engines WRAP System Support (LEDS and GPIO)"
+	select GPIOLIB
+	---help---
+	  This option enables system support for the PC Engines WRAP.
+
+	  Note: You must still enable the drivers for GPIO and LED support
+	  (GPIO_SCX200 & LEDS_GPIO) to actually use the LEDs.
+
 config ALIX
 	bool "PCEngines ALIX System Support (LED setup)"
 	select GPIOLIB
diff -purN linux-5.3.orig/arch/x86/platform/geode/Makefile linux-5.3/arch/x86/platform/geode/Makefile
--- linux-5.3.orig/arch/x86/platform/geode/Makefile	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/arch/x86/platform/geode/Makefile	2019-09-17 10:08:16.717890589 +0200
@@ -1,4 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0-only
+obj-$(CONFIG_WRAP)		+= wrap.o
 obj-$(CONFIG_ALIX)		+= alix.o
 obj-$(CONFIG_NET5501)		+= net5501.o
 obj-$(CONFIG_GEOS)		+= geos.o
diff -purN linux-5.3.orig/arch/x86/platform/geode/wrap.c linux-5.3/arch/x86/platform/geode/wrap.c
--- linux-5.3.orig/arch/x86/platform/geode/wrap.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-5.3/arch/x86/platform/geode/wrap.c	2019-09-17 10:08:19.017885137 +0200
@@ -0,0 +1,100 @@
+/*
+ * System Specific setup for PC Engines WRAP.
+ *
+ * Copyright (C) 2015 Christoph Schulz <develop@kristov.de>
+ *
+ * Based on alix.c by Constantin Baranov <const@mimas.ru>,
+ * Ed Wildgoose <kernel@wildgooses.com>, and
+ * Philip Prindeville <philipp@redfish-solutions.com>.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/string.h>
+#include <linux/module.h>
+#include <linux/gpio/machine.h>
+
+#include <asm/geode.h>
+
+#define BIOS_SIGNATURE_TINYBIOS		0xf0000
+#define BIOS_REGION_SIZE		0x10000
+
+static struct gpiod_lookup_table wrap_gpio_lookup = {
+	.table = {
+		GPIO_LOOKUP_IDX("gpio-scx200", 2, "wrap-led", 0, GPIO_ACTIVE_LOW),
+		GPIO_LOOKUP_IDX("gpio-scx200", 3, "wrap-led", 1, GPIO_ACTIVE_LOW),
+		GPIO_LOOKUP_IDX("gpio-scx200", 18, "wrap-led", 2, GPIO_ACTIVE_LOW),
+		GPIO_LOOKUP_IDX("gpio-scx200", 40, "wrap-button", 0, GPIO_ACTIVE_LOW),
+		{ },
+	},
+};
+
+static inline bool is_geode_sc1100(void)
+{
+	return ((boot_cpu_data.x86_vendor == X86_VENDOR_NSC) &&
+		(boot_cpu_data.x86 == 5) &&
+		(boot_cpu_data.x86_model == 9));
+}
+
+static bool __init wrap_present(unsigned long bios_phys,
+				const char *wrap_sig,
+				size_t wrap_sig_len)
+{
+	const size_t bios_len = BIOS_REGION_SIZE;
+	const char *bios_virt;
+	const char *scan_end;
+	const char *p;
+	char name[64];
+
+	bios_virt = phys_to_virt(bios_phys);
+	scan_end = bios_virt + bios_len - (wrap_sig_len + 2);
+	for (p = bios_virt; p < scan_end; p++) {
+		char *a;
+
+		if (memcmp(p, wrap_sig, wrap_sig_len) != 0)
+			continue;
+
+		memcpy(name, p, sizeof(name));
+
+		/* remove the first \0 character from string */
+		a = strchr(name, '\0');
+		if (a)
+			*a = ' ';
+
+		/* cut the string at a newline */
+		a = strchr(name, '\r');
+		if (a)
+			*a = '\0';
+
+		pr_info("system is recognized as \"%s\"\n", name);
+		return true;
+	}
+
+	return false;
+}
+
+static int __init wrap_init(void)
+{
+	const char tinybios_sig[] = "PC Engines WRAP";
+
+	if (!is_geode_sc1100())
+		return 0;
+
+	if (wrap_present(BIOS_SIGNATURE_TINYBIOS, tinybios_sig,
+			 sizeof(tinybios_sig) - 1))
+		gpiod_add_lookup_table(&wrap_gpio_lookup);
+
+	return 0;
+}
+
+MODULE_AUTHOR("Christoph Schulz <develop@kristov.de>");
+MODULE_DESCRIPTION("PC Engines WRAP System Setup");
+MODULE_LICENSE("GPL");
+
+module_init(wrap_init);
