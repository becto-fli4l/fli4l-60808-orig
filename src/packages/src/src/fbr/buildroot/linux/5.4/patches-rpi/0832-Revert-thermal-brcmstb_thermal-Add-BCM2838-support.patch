From: Chen-Yu Tsai <wens@csie.org>
Date: Thu, 14 May 2020 17:24:28 +0800
Subject: Revert "thermal: brcmstb_thermal: Add BCM2838 support"

This reverts commit 9d62448adc918a94fba091d475d0e6f1648c36f4.

Signed-off-by: Chen-Yu Tsai <wens@csie.org>
---
 drivers/thermal/broadcom/Kconfig           |  2 +-
 drivers/thermal/broadcom/brcmstb_thermal.c | 61 +++-------------------
 2 files changed, 9 insertions(+), 54 deletions(-)

diff --git a/drivers/thermal/broadcom/Kconfig b/drivers/thermal/broadcom/Kconfig
index 42c6b22b35ce..061f1db6edc9 100644
--- a/drivers/thermal/broadcom/Kconfig
+++ b/drivers/thermal/broadcom/Kconfig
@@ -16,7 +16,7 @@ config BCM2835_THERMAL
 
 config BRCMSTB_THERMAL
 	tristate "Broadcom STB AVS TMON thermal driver"
-	depends on ARCH_BRCMSTB || ARCH_BCM2835 || COMPILE_TEST
+	depends on ARCH_BRCMSTB || COMPILE_TEST
 	help
 	  Enable this driver if you have a Broadcom STB SoC and would like
 	  thermal framework support.
diff --git a/drivers/thermal/broadcom/brcmstb_thermal.c b/drivers/thermal/broadcom/brcmstb_thermal.c
index 7a7c6ad7b8a0..680f1a070606 100644
--- a/drivers/thermal/broadcom/brcmstb_thermal.c
+++ b/drivers/thermal/broadcom/brcmstb_thermal.c
@@ -10,7 +10,6 @@
 #define pr_fmt(fmt)	DRV_NAME ": " fmt
 
 #include <linux/bitops.h>
-#include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/err.h>
 #include <linux/io.h>
@@ -23,6 +22,9 @@
 #include <linux/thermal.h>
 
 #define AVS_TMON_STATUS			0x00
+ #define AVS_TMON_STATUS_valid_msk	BIT(11)
+ #define AVS_TMON_STATUS_data_msk	GENMASK(10, 1)
+ #define AVS_TMON_STATUS_data_shift	1
 
 #define AVS_TMON_EN_OVERTEMP_RESET	0x04
  #define AVS_TMON_EN_OVERTEMP_RESET_msk	BIT(0)
@@ -100,19 +102,10 @@ static struct avs_tmon_trip avs_tmon_trips[] = {
 	},
 };
 
-struct brcmstb_thermal_of_data {
-	const struct thermal_zone_of_device_ops *of_ops;
-	u32 status_valid_mask;
-	u32 status_data_mask;
-	u32 status_data_shift;
-};
-
 struct brcmstb_thermal_priv {
 	void __iomem *tmon_base;
 	struct device *dev;
 	struct thermal_zone_device *thermal;
-	struct clk *clk;
-	const struct brcmstb_thermal_of_data *socdata;
 };
 
 /* Convert a HW code to a temperature reading (millidegree celsius) */
@@ -149,18 +142,17 @@ static inline u32 avs_tmon_temp_to_code(struct thermal_zone_device *tz,
 static int brcmstb_get_temp(void *data, int *temp)
 {
 	struct brcmstb_thermal_priv *priv = data;
-	const struct brcmstb_thermal_of_data *socdata = priv->socdata;
 	u32 val;
 	long t;
 
 	val = __raw_readl(priv->tmon_base + AVS_TMON_STATUS);
 
-	if (!(val & socdata->status_valid_mask)) {
+	if (!(val & AVS_TMON_STATUS_valid_msk)) {
 		dev_err(priv->dev, "reading not valid\n");
 		return -EIO;
 	}
 
-	val = (val & socdata->status_data_mask) >> socdata->status_data_shift;
+	val = (val & AVS_TMON_STATUS_data_msk) >> AVS_TMON_STATUS_data_shift;
 
 	t = avs_tmon_code_to_temp(priv->thermal, val);
 	if (t < 0)
@@ -285,34 +277,13 @@ static int brcmstb_set_trips(void *data, int low, int high)
 	return 0;
 }
 
-static const struct thermal_zone_of_device_ops bcm7445_thermal_of_ops = {
+static const struct thermal_zone_of_device_ops of_ops = {
 	.get_temp	= brcmstb_get_temp,
 	.set_trips	= brcmstb_set_trips,
 };
 
-static const struct thermal_zone_of_device_ops bcm2838_thermal_of_ops = {
-	.get_temp	= brcmstb_get_temp,
-};
-
-static const struct brcmstb_thermal_of_data bcm7445_thermal_of_data = {
-	.of_ops = &bcm7445_thermal_of_ops,
-	.status_valid_mask = BIT(11),
-	.status_data_mask = GENMASK(10, 1),
-	.status_data_shift = 1,
-};
-
-static const struct brcmstb_thermal_of_data bcm2838_thermal_of_data = {
-	.of_ops = &bcm2838_thermal_of_ops,
-	.status_valid_mask = BIT(10),
-	.status_data_mask = GENMASK(9, 0),
-	.status_data_shift = 0,
-};
-
 static const struct of_device_id brcmstb_thermal_id_table[] = {
-	{ .compatible = "brcm,avs-tmon",
-	  .data = &bcm7445_thermal_of_data },
-	{ .compatible = "brcm,avs-tmon-bcm2838",
-	  .data = &bcm2838_thermal_of_data },
+	{ .compatible = "brcm,avs-tmon" },
 	{},
 };
 MODULE_DEVICE_TABLE(of, brcmstb_thermal_id_table);
@@ -333,27 +304,11 @@ static int brcmstb_thermal_probe(struct platform_device *pdev)
 	if (IS_ERR(priv->tmon_base))
 		return PTR_ERR(priv->tmon_base);
 
-	priv->socdata = of_device_get_match_data(&pdev->dev);
-	if (!priv->socdata) {
-		dev_err(&pdev->dev, "no device match found\n");
-		return -ENODEV;
-	}
-
-	priv->clk = devm_clk_get(&pdev->dev, NULL);
-	if (IS_ERR(priv->clk) && PTR_ERR(priv->clk) == -EPROBE_DEFER)
-		return -EPROBE_DEFER;
-
-	if (!IS_ERR(priv->clk)) {
-		ret = clk_prepare_enable(priv->clk);
-		if (ret)
-			return ret;
-	}
-
 	priv->dev = &pdev->dev;
 	platform_set_drvdata(pdev, priv);
 
 	thermal = devm_thermal_zone_of_sensor_register(&pdev->dev, 0, priv,
-						       priv->socdata->of_ops);
+						       &of_ops);
 	if (IS_ERR(thermal)) {
 		ret = PTR_ERR(thermal);
 		dev_err(&pdev->dev, "could not register sensor: %d\n", ret);
