diff -purN busybox-1.27.1.orig/sysklogd/syslogd.c busybox-1.27.1/sysklogd/syslogd.c
--- busybox-1.27.1.orig/sysklogd/syslogd.c	2017-09-04 14:44:53.012365038 +0200
+++ busybox-1.27.1/sysklogd/syslogd.c	2017-09-04 14:46:17.929096714 +0200
@@ -88,6 +88,13 @@
 //config:	  entire filesystem, which may cause your system to
 //config:	  break badly.
 //config:
+//config:config FEATURE_SYSLOGD_RECEIVER
+//config:	bool "Support receiving remote syslog messages"
+//config:	default y
+//config:	depends on SYSLOGD
+//config:	help
+//config:	  Supports receiving syslog messages on UDP port 514.
+//config:
 //config:config FEATURE_IPC_SYSLOG_BUFFER_SIZE
 //config:	int "Circular buffer size in Kbytes (minimum 4KB)"
 //config:	default 16
@@ -146,6 +153,9 @@
 //usage:	IF_FEATURE_SYSLOGD_CFG(
 //usage:     "\n	-f FILE		Use FILE as config (default:/etc/syslog.conf)"
 //usage:	)
+//usage:	IF_FEATURE_SYSLOGD_RECEIVER(
+//usage:     "\n	-r		Receive messages on UDP port 514"
+//usage:	)
 /* //usage:  "\n	-m MIN		Minutes between MARK lines (default 20, 0=off)" */
 //usage:
 //usage:#define syslogd_example_usage
@@ -192,6 +202,10 @@ enum {
 	DNS_WAIT_SEC = 2 * 60,
 };
 
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+#define IPPORT_SYSLOGD 514
+#endif
+
 /* Semaphore operation structures */
 struct shbuf_ds {
 	int32_t size;   /* size of data - 1 */
@@ -271,6 +285,11 @@ struct globals {
 	/* localhost's name. We print only first 64 chars */
 	char *hostname;
 
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+	/* localhost's domain name. */
+	char *domainname;
+#endif
+
 	/* We recv into recvbuf... */
 	char recvbuf[MAX_READ * (1 + ENABLE_FEATURE_SYSLOGD_DUP)];
 	/* ...then copy to parsebuf, escaping control chars */
@@ -323,6 +342,7 @@ enum {
 	IF_FEATURE_REMOTE_LOG(    OPTBIT_locallog   ,)	// -L
 	IF_FEATURE_IPC_SYSLOG(    OPTBIT_circularlog,)	// -C
 	IF_FEATURE_SYSLOGD_DUP(   OPTBIT_dup        ,)	// -D
+	IF_FEATURE_SYSLOGD_RECEIVER(OPTBIT_receiver ,)	// -r
 	IF_FEATURE_SYSLOGD_CFG(   OPTBIT_cfg        ,)	// -f
 	IF_FEATURE_KMSG_SYSLOG(   OPTBIT_kmsg       ,)	// -K
 
@@ -337,6 +357,7 @@ enum {
 	OPT_locallog    = IF_FEATURE_REMOTE_LOG(    (1 << OPTBIT_locallog   )) + 0,
 	OPT_circularlog = IF_FEATURE_IPC_SYSLOG(    (1 << OPTBIT_circularlog)) + 0,
 	OPT_dup         = IF_FEATURE_SYSLOGD_DUP(   (1 << OPTBIT_dup        )) + 0,
+	OPT_receiver    = IF_FEATURE_SYSLOGD_RECEIVER((1<<OPTBIT_receiver   )) + 0,
 	OPT_cfg         = IF_FEATURE_SYSLOGD_CFG(   (1 << OPTBIT_cfg        )) + 0,
 	OPT_kmsg        = IF_FEATURE_KMSG_SYSLOG(   (1 << OPTBIT_kmsg       )) + 0,
 };
@@ -347,6 +368,7 @@ enum {
 	IF_FEATURE_REMOTE_LOG(    "L"  ) \
 	IF_FEATURE_IPC_SYSLOG(    "C::") \
 	IF_FEATURE_SYSLOGD_DUP(   "D"  ) \
+	IF_FEATURE_SYSLOGD_RECEIVER("r") \
 	IF_FEATURE_SYSLOGD_CFG(   "f:" ) \
 	IF_FEATURE_KMSG_SYSLOG(   "K"  )
 #define OPTION_DECL *opt_m, *opt_l \
@@ -890,7 +912,7 @@ static void parse_fac_prio_20(int pri, c
 /* len parameter is used only for "is there a timestamp?" check.
  * NB: some callers cheat and supply len==0 when they know
  * that there is no timestamp, short-circuiting the test. */
-static void timestamp_and_log(int pri, char *msg, int len)
+static void timestamp_and_log(int pri, char *msg, int len, char const *hostname)
 {
 	char *timestamp;
 	time_t now;
@@ -920,7 +942,7 @@ static void timestamp_and_log(int pri, c
 	else {
 		char res[20];
 		parse_fac_prio_20(pri, res);
-		sprintf(G.printbuf, "%s %.64s %s %s\n", timestamp, G.hostname, res, msg);
+		sprintf(G.printbuf, "%s %.64s %s %s\n", timestamp, hostname, res, msg);
 	}
 
 	/* Log message locally (to file or shared mem) */
@@ -970,13 +992,13 @@ static void timestamp_and_log_internal(c
 	/* -L, or no -R */
 	if (ENABLE_FEATURE_REMOTE_LOG && !(option_mask32 & OPT_locallog))
 		return;
-	timestamp_and_log(LOG_SYSLOG | LOG_INFO, (char*)msg, 0);
+	timestamp_and_log(LOG_SYSLOG | LOG_INFO, (char*)msg, 0, G.hostname);
 }
 
 /* tmpbuf[len] is a NUL byte (set by caller), but there can be other,
  * embedded NULs. Split messages on each of these NULs, parse prio,
  * escape control chars and log each locally. */
-static void split_escape_and_log(char *tmpbuf, int len)
+static void split_escape_and_log(char *tmpbuf, int len, char const *hostname)
 {
 	char *p = tmpbuf;
 
@@ -1007,7 +1029,7 @@ static void split_escape_and_log(char *t
 		*q = '\0';
 
 		/* Now log it */
-		timestamp_and_log(pri, G.parsebuf, q - G.parsebuf);
+		timestamp_and_log(pri, G.parsebuf, q - G.parsebuf, hostname);
 	}
 }
 
@@ -1049,9 +1071,31 @@ static NOINLINE int create_socket(void)
 	return sock_fd;
 }
 
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+static NOINLINE int create_net_socket(void)
+{
+	int sock_net;
+	struct sockaddr_in in;
+
+	memset(&in, 0, sizeof(in));
+	in.sin_family = AF_INET;
+	in.sin_port = htons ((uint16_t) IPPORT_SYSLOGD);
+	/*in.sin_addr.s_addr = INADDR_ANY;*/
+
+	sock_net = xsocket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
+	xbind(sock_net, (struct sockaddr *) &in, sizeof(in));
+	return sock_net;
+}
+#endif
+
 static void do_syslogd(void) NORETURN;
 static void do_syslogd(void)
 {
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+	int sock_net = -1;
+	int select_max = 0;
+	fd_set sockets;
+#endif
 #if ENABLE_FEATURE_REMOTE_LOG
 	llist_t *item;
 #endif
@@ -1073,6 +1117,15 @@ static void do_syslogd(void)
 	alarm(G.markInterval);
 #endif
 	xmove_fd(create_socket(), STDIN_FILENO);
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+	if (option_mask32 & OPT_receiver) {
+		sock_net = create_net_socket();
+		select_max = sock_net + 1;
+	}
+	else {
+		select_max = STDIN_FILENO + 1;
+	}
+#endif
 
 	if (option_mask32 & OPT_circularlog)
 		ipcsyslog_init();
@@ -1083,6 +1136,11 @@ static void do_syslogd(void)
 	timestamp_and_log_internal("syslogd started: BusyBox v" BB_VER);
 
 	while (!bb_got_signal) {
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+		int rc;
+		int remote = 0;
+		struct sockaddr_in src;
+#endif
 		ssize_t sz;
 
 #if ENABLE_FEATURE_SYSLOGD_DUP
@@ -1093,12 +1151,38 @@ static void do_syslogd(void)
 			recvbuf = G.recvbuf;
 #endif
  read_again:
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+		FD_ZERO (&sockets);
+		FD_SET(STDIN_FILENO, &sockets);
+		if (sock_net >= 0) {
+			FD_SET(sock_net, &sockets);
+		}
+
+		rc = select(select_max, &sockets, (fd_set *) NULL, (fd_set *) NULL, NULL);
+		if (rc < 0) {
+			if (!bb_got_signal)
+				bb_perror_msg("read from socket");
+			break;
+		}
+		else if (FD_ISSET(STDIN_FILENO, &sockets)) {
+			sz = read(STDIN_FILENO, recvbuf, MAX_READ - 1);
+		}
+		else if (sock_net >= 0) {
+			socklen_t addrlen = sizeof src;
+			sz = recvfrom(sock_net, recvbuf, MAX_READ - 1, 0, &src, &addrlen);
+			remote = 1;
+		}
+		else {
+			sz = 0;
+		}
+#else
 		sz = read(STDIN_FILENO, recvbuf, MAX_READ - 1);
 		if (sz < 0) {
 			if (!bb_got_signal)
 				bb_perror_msg("read from %s", _PATH_LOG);
 			break;
 		}
+#endif
 
 		/* Drop trailing '\n' and NULs (typically there is one NUL) */
 		while (1) {
@@ -1122,6 +1206,9 @@ static void do_syslogd(void)
 		last_sz = sz;
 #endif
 #if ENABLE_FEATURE_REMOTE_LOG
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+		if (!remote) {
+#endif
 		/* Stock syslogd sends it '\n'-terminated
 		 * over network, mimic that */
 		recvbuf[sz] = '\n';
@@ -1158,10 +1245,53 @@ static void do_syslogd(void)
 				}
 			}
 		}
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+		}
+#endif
 #endif
 		if (!ENABLE_FEATURE_REMOTE_LOG || (option_mask32 & OPT_locallog)) {
 			recvbuf[sz] = '\0'; /* ensure it *is* NUL terminated */
-			split_escape_and_log(recvbuf, sz);
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+			if (!remote)
+#endif
+			split_escape_and_log(recvbuf, sz, G.hostname);
+#if ENABLE_FEATURE_SYSLOGD_RECEIVER
+			else {
+				size_t hostnamelen = 64;
+				char *hostname = (char *) xmalloc(hostnamelen);
+				while (1) {
+					rc = getnameinfo((struct sockaddr *) &src, sizeof src, hostname, hostnamelen, NULL, 0, 0);
+					if (rc == 0) {
+						break;
+					}
+					else if (rc == EAI_OVERFLOW) {
+						hostnamelen *= 2;
+						hostname = (char *) xrealloc(hostname, hostnamelen);
+					}
+					else {
+						free(hostname);
+						hostname = NULL;
+						break;
+					}
+				}
+				if (hostname) {
+					if (!G.domainname) {
+						struct hostent *hp = xgethostbyname(G.hostname);
+						char *domain = strchrnul(hp->h_name, '.');
+						if (*domain) {
+							G.domainname = xstrdup(domain + 1);
+						}
+					}
+					if (G.domainname) {
+						char *p = strchrnul(hostname, '.');
+						if (*p && strcmp(p + 1, G.domainname) == 0) {
+							*p = '\0';
+						}
+					}
+				}
+				split_escape_and_log(recvbuf, sz, hostname ? hostname : inet_ntoa(src.sin_addr));
+			}
+#endif
 		}
 	} /* while (!bb_got_signal) */
 
