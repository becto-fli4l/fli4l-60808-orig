diff -purN uClibc-ng-1.0.22.orig/libc/sysdeps/linux/i386/bits/syscalls.h uClibc-ng-1.0.22/libc/sysdeps/linux/i386/bits/syscalls.h
--- uClibc-ng-1.0.22.orig/libc/sysdeps/linux/i386/bits/syscalls.h	2017-02-01 21:38:02.000000000 +0100
+++ uClibc-ng-1.0.22/libc/sysdeps/linux/i386/bits/syscalls.h	2017-08-30 13:05:50.799072548 +0200
@@ -13,6 +13,7 @@
 #ifndef __ASSEMBLER__
 
 #include <errno.h>
+#include <common/sysdep.h>
 
 #define INTERNAL_SYSCALL_NCS_X86_UPTOFIVE(name, err, nr, args...) \
 (__extension__ \
@@ -45,72 +46,15 @@ extern long __libc_i386_syscall6(unsigne
 #define INTERNAL_SYSCALL_NCS(name, err, nr, args...) \
 	INTERNAL_SYSCALL_NCS_X86_##nr(name, err, nr, args)
 
-/* This code avoids pushing/popping ebx as much as possible.
- * I think the main reason was that older GCCs had problems
- * with proper saving/restoring of ebx if "b" constraint was used,
- * which was breaking -fPIC code really badly.
- * At least gcc 4.2.x seems to not need these tricks anymore,
- * but this code is still useful because it often avoids
- * using stack for saving ebx.
- * Keeping it unconditionally enabled for now.
- */
-
-/* We need some help from the assembler to generate optimal code.
- * We define some macros here which later will be used.  */
-/* FIXME: drop these b* macros! */
-
-__asm__ (
-	".L__X'%ebx = 1\n\t"
-	".L__X'%ecx = 2\n\t"
-	".L__X'%edx = 2\n\t"
-	".L__X'%eax = 3\n\t"
-	".L__X'%esi = 3\n\t"
-	".L__X'%edi = 3\n\t"
-	".L__X'%ebp = 3\n\t"
-	".L__X'%esp = 3\n\t"
-
-	/* Loading param #1 (ebx) is done by loading it into
-	 * another register, and then performing bpushl+bmovl,
-	 * since we must preserve ebx */
-
-	".macro bpushl name reg\n\t"
-	".if 1 - \\name\n\t"    /* if reg!=ebx... */
-	".if 2 - \\name\n\t"    /* if reg can't be clobbered... */
-	"pushl %ebx\n\t"        /* save ebx on stack */
-	".else\n\t"
-	"xchgl \\reg, %ebx\n\t" /* else save ebx in reg, and load reg to ebx */
-	".endif\n\t"
-	".endif\n\t"
-	".endm\n\t"
-
-	".macro bmovl name reg\n\t"
-	".if 1 - \\name\n\t"
-	".if 2 - \\name\n\t"    /* if reg can't be clobbered... */
-	"movl \\reg, %ebx\n\t"  /* load reg to ebx */
-	".endif\n\t"
-	".endif\n\t"
-	".endm\n\t"
-
-	".macro bpopl name reg\n\t"
-	".if 1 - \\name\n\t"
-	".if 2 - \\name\n\t"    /* if reg can't be clobbered... */
-	"popl %ebx\n\t"         /* restore ebx from stack */
-	".else\n\t"
-	"xchgl \\reg, %ebx\n\t" /* else restore ebx from reg */
-	".endif\n\t"
-	".endif\n\t"
-	".endm\n\t"
-);
-
 #define LOADARGS_0
-#define LOADARGS_1  "bpushl .L__X'%k2, %k2\n\t" "bmovl .L__X'%k2, %k2\n\t"
+#define LOADARGS_1  "push %%ebx\n\t" CFI_ADJUST_CFA_OFFSET(4) "\n\t" CFI_REL_OFFSET(ebx, 0) "\n\t" "movl %k2, %%ebx\n\t"
 #define LOADARGS_2  LOADARGS_1
 #define LOADARGS_3  LOADARGS_1
 #define LOADARGS_4  LOADARGS_1
 #define LOADARGS_5  LOADARGS_1
 
 #define RESTOREARGS_0
-#define RESTOREARGS_1  "bpopl .L__X'%k2, %k2\n\t"
+#define RESTOREARGS_1  "pop %%ebx\n\t" CFI_ADJUST_CFA_OFFSET(-4) "\n\t" CFI_RESTORE(ebx) "\n\t" RESTOREARGS_0
 #define RESTOREARGS_2  RESTOREARGS_1
 #define RESTOREARGS_3  RESTOREARGS_1
 #define RESTOREARGS_4  RESTOREARGS_1
