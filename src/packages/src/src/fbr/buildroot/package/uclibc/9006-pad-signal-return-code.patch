diff -purN uClibc-ng-1.0.28.orig/libc/sysdeps/linux/i386/sigaction.c uClibc-ng-1.0.28/libc/sysdeps/linux/i386/sigaction.c
--- uClibc-ng-1.0.28.orig/libc/sysdeps/linux/i386/sigaction.c	2018-01-21 12:56:38.000000000 +0100
+++ uClibc-ng-1.0.28/libc/sysdeps/linux/i386/sigaction.c	2018-01-31 22:27:08.995570887 +0100
@@ -117,6 +117,7 @@ libc_hidden_weak(sigaction)
 __asm__	(						\
 	"nop\n"						\
 	".text\n"					\
+	".align 16\n"					\
 	"__" #name ":\n"				\
 	"	movl	$" #syscall ", %eax\n"		\
 	"	int	$0x80\n"			\
@@ -131,6 +132,7 @@ RESTORE(restore_rt, __NR_rt_sigreturn)
 __asm__ (						\
 	"nop\n"						\
 	".text\n"					\
+	".align 8\n"					\
 	"__" #name ":\n"				\
 	"	popl	%eax\n"				\
 	"	movl	$" #syscall ", %eax\n"		\
diff -purN uClibc-ng-1.0.28.orig/libc/sysdeps/linux/x86_64/sigaction.c uClibc-ng-1.0.28/libc/sysdeps/linux/x86_64/sigaction.c
--- uClibc-ng-1.0.28.orig/libc/sysdeps/linux/x86_64/sigaction.c	2018-01-21 12:56:39.000000000 +0100
+++ uClibc-ng-1.0.28/libc/sysdeps/linux/x86_64/sigaction.c	2018-01-31 22:10:17.380316658 +0100
@@ -21,11 +21,13 @@
 #include <stddef.h>
 #include <signal.h>
 #include <string.h>
-
+#include <sysdep.h>
 #include <sys/syscall.h>
 
 #include <bits/kernel_sigaction.h>
 
+#include "ucontext_i.h"
+
 /* We do not globally define the SA_RESTORER flag so do it here.  */
 #define SA_RESTORER 0x04000000
 
@@ -118,16 +120,95 @@ libc_hidden_weak(sigaction)
    will be in the middle of a call instruction.  See the Linux kernel
    (the i386 vsyscall, in particular) for an explanation of the complex
    unwind information used here in order to get the traditional CFA.
+
+   We do not restore cs - it's only stored as two bytes here so that's
+   a bit tricky.  We don't use the gas cfi directives, so that we can
+   reliably add .cfi_signal_frame.
  */
 
+/* Long and pointer size in bytes. From glibc's sysdep.h.  */
+#ifndef LP_SIZE
+#define LP_SIZE "8"
+#endif
+
+#define do_cfa_expr						\
+  "	.byte 0x0f\n"		/* DW_CFA_def_cfa_expression */	\
+  "	.uleb128 2f-1f\n"	/* length */			\
+  "1:	.byte 0x77\n"		/* DW_OP_breg7 */		\
+  "	.sleb128 " CFI_STRINGIFY (oRSP) "\n"			\
+  "	.byte 0x06\n"		/* DW_OP_deref */		\
+  "2:"
+
+#define do_expr(regno, offset)					\
+  "	.byte 0x10\n"		/* DW_CFA_expression */		\
+  "	.uleb128 " CFI_STRINGIFY (regno) "\n"			\
+  "	.uleb128 2f-1f\n"	/* length */			\
+  "1:	.byte 0x77\n"		/* DW_OP_breg7 */		\
+  "	.sleb128 " CFI_STRINGIFY (offset) "\n"			\
+  "2:"
+ 
 #define RESTORE(name, syscall) RESTORE2(name, syscall)
 #define RESTORE2(name, syscall) \
-__asm__ (						\
-	"nop\n"						\
-	".text\n"					\
-	"__" #name ":\n"				\
-	"	movq	$" #syscall ", %rax\n"		\
-	"	syscall\n"				\
+__asm__ (									\
+	".text\n"								\
+	/* `nop' for debuggers assuming `call' should not disalign the code. */ \
+	"	nop\n"								\
+	".align 16\n"								\
+	".LSTART_" #name ":\n"							\
+	"	.type __" #name ",@function\n"					\
+	"__" #name ":\n"							\
+	"	movq $" #syscall ", %rax\n"					\
+	"	syscall\n"							\
+	".LEND_" #name ":\n"							\
+	".section .eh_frame,\"a\",@progbits\n"					\
+	".LSTARTFRAME_" #name ":\n"						\
+	"	.long .LENDCIE_" #name "-.LSTARTCIE_" #name "\n"		\
+	".LSTARTCIE_" #name ":\n"						\
+	"	.long 0\n"	/* CIE ID */					\
+	"	.byte 1\n"	/* Version number */				\
+	"	.string \"zRS\"\n" /* NUL-terminated augmentation string */	\
+	"	.uleb128 1\n"	/* Code alignment factor */			\
+	"	.sleb128 -8\n"	/* Data alignment factor */			\
+	"	.uleb128 16\n"	/* Return address register column (rip) */	\
+	/* Augmentation value length */						\
+	"	.uleb128 .LENDAUGMNT_" #name "-.LSTARTAUGMNT_" #name "\n"	\
+	".LSTARTAUGMNT_" #name ":\n"						\
+	"	.byte 0x1b\n"	/* DW_EH_PE_pcrel|DW_EH_PE_sdata4. */		\
+	".LENDAUGMNT_" #name ":\n"						\
+	"	.align " LP_SIZE "\n"						\
+	".LENDCIE_" #name ":\n"							\
+	"	.long .LENDFDE_" #name "-.LSTARTFDE_" #name "\n" /* FDE len */	\
+	".LSTARTFDE_" #name ":\n"						\
+	"	.long .LSTARTFDE_" #name "-.LSTARTFRAME_" #name "\n" /* CIE */	\
+	/* `LSTART_' is subtracted 1 as debuggers assume a `call' here.  */	\
+	"	.long (.LSTART_" #name "-1)-.\n" /* PC-relative start addr.  */	\
+	"	.long .LEND_" #name "-(.LSTART_" #name "-1)\n"			\
+	"	.uleb128 0\n"			/* FDE augmentation length */	\
+	do_cfa_expr								\
+	do_expr (8 /* r8 */, oR8)						\
+	do_expr (9 /* r9 */, oR9)						\
+	do_expr (10 /* r10 */, oR10)						\
+	do_expr (11 /* r11 */, oR11)						\
+	do_expr (12 /* r12 */, oR12)						\
+	do_expr (13 /* r13 */, oR13)						\
+	do_expr (14 /* r14 */, oR14)						\
+	do_expr (15 /* r15 */, oR15)						\
+	do_expr (5 /* rdi */, oRDI)						\
+	do_expr (4 /* rsi */, oRSI)						\
+	do_expr (6 /* rbp */, oRBP)						\
+	do_expr (3 /* rbx */, oRBX)						\
+	do_expr (1 /* rdx */, oRDX)						\
+	do_expr (0 /* rax */, oRAX)						\
+	do_expr (2 /* rcx */, oRCX)						\
+	do_expr (7 /* rsp */, oRSP)						\
+	do_expr (16 /* rip */, oRIP)						\
+	/* libgcc-4.1.1 has only `DWARF_FRAME_REGISTERS == 17'.  */		\
+	/* do_expr (49 |* rflags *|, oEFL) */					\
+	/* `cs'/`ds'/`fs' are unaligned and a different size.  */		\
+	/* gas: Error: register save offset not a multiple of 8  */		\
+	"	.align " LP_SIZE "\n"						\
+	".LENDFDE_" #name ":\n"							\
+	"	.previous\n"							\
 );
 
 #ifdef __NR_rt_sigaction
