diff -purN uClibc-ng-1.0.28.orig/libc/sysdeps/linux/i386/clone.S uClibc-ng-1.0.28/libc/sysdeps/linux/i386/clone.S
--- uClibc-ng-1.0.28.orig/libc/sysdeps/linux/i386/clone.S	2018-01-21 12:56:38.000000000 +0100
+++ uClibc-ng-1.0.28/libc/sysdeps/linux/i386/clone.S	2018-01-31 22:09:25.311132095 +0100
@@ -23,6 +23,7 @@
 
 #define _ERRNO_H	1
 #include <bits/errno.h>
+#include <sysdep.h>
 #include <sys/syscall.h>
 
 /* int clone(int (*fn)(void *arg), void *child_stack, int flags, void *arg,
@@ -43,6 +44,7 @@
 .global clone
 .type   clone,%function
 clone:
+	cfi_startproc;
 	/* Sanity check arguments.  */
 	movl	$-EINVAL,%eax
 
@@ -80,13 +82,23 @@ clone:
 
 	/* Do the system call */
 	pushl	%ebx
+	cfi_adjust_cfa_offset (4)
 	pushl	%esi
+	cfi_adjust_cfa_offset (4)
 	pushl	%edi
+	cfi_adjust_cfa_offset (4)
 	movl	TLS+12(%esp),%esi
+	cfi_rel_offset (esi, 4)
 	movl	PTID+12(%esp),%edx
 	movl	FLAGS+12(%esp),%ebx
+	cfi_rel_offset (ebx, 8)
 	movl	CTID+12(%esp),%edi
+	cfi_rel_offset (edi, 0)
 	movl	$__NR_clone,%eax
+	/* End FDE now, because in the child the unwind info will be
+	   wrong.  */
+	cfi_endproc
+
 	int	$0x80
 	popl	%edi
 	popl	%esi
@@ -98,6 +110,9 @@ clone:
 	ret
 
 .Lthread_start:
+	cfi_startproc;
+	/* Clearing frame pointer is insufficient, use CFI.  */
+	cfi_undefined (eip);
 	/* Note: %esi is zero.  */
 	movl	%esi,%ebp	/* terminate the stack frame */
 	call	*%ebx
@@ -110,6 +125,7 @@ clone:
 	movl	%eax, %ebx
 	movl	$__NR_exit, %eax
 	int	$0x80
+	cfi_endproc;
 
 /* Need to indirect jump to syscall error 
  * or we end up with TEXTREL's
diff -purN uClibc-ng-1.0.28.orig/libc/sysdeps/linux/x86_64/clone.S uClibc-ng-1.0.28/libc/sysdeps/linux/x86_64/clone.S
--- uClibc-ng-1.0.28.orig/libc/sysdeps/linux/x86_64/clone.S	2018-01-21 12:56:39.000000000 +0100
+++ uClibc-ng-1.0.28/libc/sysdeps/linux/x86_64/clone.S	2018-01-31 22:09:25.311132095 +0100
@@ -20,6 +20,7 @@
 #include <features.h>
 #define _ERRNO_H 1
 #include <bits/errno.h>
+#include <sysdep.h>
 #include <sys/syscall.h>
 
 /* The userland implementation is:
@@ -49,6 +50,7 @@
 .global clone
 .type   clone,%function
 clone:
+	cfi_startproc;
 	/* Sanity check arguments.  */
 	movq	$-EINVAL,%rax
 	testq	%rdi,%rdi		/* no NULL function pointers */
@@ -71,7 +73,11 @@ clone:
 	movq	8(%rsp), %r10
 	movl	$__NR_clone,%eax
 
-	syscall
+	/* End FDE now, because in the child the unwind info will be
+	   wrong.  */
+	cfi_endproc;
+
+ 	syscall
 
 	testq	%rax,%rax
 	jl	__syscall_error
@@ -81,6 +87,9 @@ clone:
 	ret
 
 .Lthread_start:
+	cfi_startproc;
+	/* Clearing frame pointer is insufficient, use CFI.  */
+	cfi_undefined (rip);
 	/* Clear the frame pointer.  The ABI suggests this be done, to mark
 	   the outermost frame obviously.  */
 	xorl	%ebp, %ebp
@@ -93,6 +102,7 @@ clone:
 	movq	%rax, %rdi
 	movl	$__NR_exit, %eax
 	syscall
+	cfi_endproc;
 
 .size clone,.-clone
 weak_alias(clone, __clone)
