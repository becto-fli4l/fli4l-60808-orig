diff -urN isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/isdn_lzscomp.c isdnutils-3.9.20060704+dfsg.3/ipppcomp/isdn_lzscomp.c
--- isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/isdn_lzscomp.c	2002-02-24 01:00:37.000000000 +0100
+++ isdnutils-3.9.20060704+dfsg.3/ipppcomp/isdn_lzscomp.c	2012-03-06 13:40:04.000000000 +0100
@@ -1,6 +1,6 @@
 /* -*- mode: c; c-basic-offset: 1 -*-
  *
- * $Id: isdn_lzscomp.c,v 1.5 2002/02/24 00:00:37 keil Exp $
+ * $Id: isdn_lzscomp.c,v 2.3 2004/10/23 12:58:21 beck Exp $
  *
  * PPP link compression code for Stac LZS (RFC1974) support
  *
@@ -9,15 +9,13 @@
  * Originally just a RFC1974 decompressor, this module now contains
  * a useable compressor as well, but that one is disabled by default.
  *
- * This code is still in ALPHA state but appears to be quite stable.
+ * This code is still in BETA state but appears to be quite stable.
  *
  *
  * Compile with:
  *  gcc -O2 -I/usr/src/linux/include -D__KERNEL__ -DMODULE -c isdn_lzscomp.c
  *
- * Or even easier, copy isdn_lzscomp.c to linux/drivers/isdn/, add a line
- * for it to the Makefile there (just below isdn_bsdcomp.o) and it is
- * compiled automatically with full kernel optimizations.
+ * or see the README for other options of building.
  *
  */
 
@@ -26,7 +24,7 @@
 #endif
 
 static const char
-rcsid[] = "$Id: isdn_lzscomp.c,v 1.5 2002/02/24 00:00:37 keil Exp $";
+rcsid[] = "$Id: isdn_lzscomp.c,v 2.3 2004/10/23 12:58:21 beck Exp $";
 
 /* Wow. No wonder this needs so long to compile. This include list
  * is a shameless rip from other compressor code. Hopefully no (C)
@@ -34,7 +32,8 @@
  */
 
 #include <linux/module.h>
-
+#include <linux/moduleparam.h>
+#include <linux/version.h>
 #include <linux/kernel.h>
 #include <linux/sched.h>
 #include <linux/types.h>
@@ -43,11 +42,14 @@
 #include <linux/ptrace.h>
 #include <linux/ioport.h>
 #include <linux/in.h>
+
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,15)
 #include <linux/malloc.h>
 #else
 #include <linux/slab.h>
 #endif
+
+#include <linux/vmalloc.h>
 #include <linux/tty.h>
 #include <linux/errno.h>
 #include <linux/sched.h>	/* to get the struct task_struct */
@@ -89,6 +91,10 @@
 #define TEST_COMP_BROKEN_SEQNO 10
 */
 
+/* Test a simple multihistory extension to the compressor */
+
+#define LZS_COMP_MULTIHIST 1
+
 /*
  * Values for debug:
  * 0 - no additional debug info
@@ -150,13 +156,15 @@
 
 MODULE_AUTHOR("Andre Beck <beck@ibh.de>");
 MODULE_DESCRIPTION("LZS Compression for I4L sync PPP");
-MODULE_PARM(debug, "i");
-MODULE_PARM(comp, "i");
-MODULE_PARM(tweak, "i");
-#if LINUX_VERSION_CODE > KERNEL_VERSION(2,4,11)
+
+#ifdef MODULE_LICENSE
 MODULE_LICENSE("GPL");
 #endif
 
+module_param(debug, int, 0400);
+module_param(comp, int, 0400);
+module_param(tweak, int, 0400);
+
 /*
  * I _have_ read Documentation/CodingStyle. I ignored the section about
  * 8 space indentations. Errare humanum est.
@@ -183,16 +191,24 @@
    this architecture unconditionally to save time.
 
    Sun Ultra/gcc: memcmp has advantages, but only on long strings (this
-   is RISC after all). 32 seems to be a good value.
-
-   Alpha/cc: There were no advantages of memcmp in measurement. However,
-   gccs milage may vary.
+   is RISC after all). 32 seems to be a good value. On a pure break even
+   measurement, memcmp starts winning at around 12, so one should settle
+   for 16. I have no results for an actual SPARC Linux, though.
+
+   PPC/gcc: Pure break even measurement showed memcmp starts winning at
+   lengths of 16.
+
+   Alpha and HPPA with gcc appear to let memcmp win unconditionally. That
+   seems strange for a RISC platform, but has been cross-tested for Alpha
+   and should be tested again for PA-RISC.
 
    Other: Not yet known.
 
    Semantics: Set to 0 to unconditionally use memcmp(3). Set to >0 to
               use memcmp(3) only when the string is at least that long.
 	      Undefine to completely wipe out memcmp(3) utilization.
+	      For unknown architectures, no use of memcmp(3) is the
+	      default.
 */
 
 #if defined(__GNUC__)
@@ -200,13 +216,24 @@
 /* With GCC on i386, memcmp is intrinsic and will always be used */
 #  define LZS_MEMCMP_THRESHOLD 0
 # endif /* defined(__i386__) */
+# if defined(__alpha__)
+/* Despite it beeing counter intuitive for a RISC system, Alpha memcmp(3)
+   wins even for shortest strings - I haven't seen the code yet, but
+   seeing the timing from break even measurement, this is a special
+   string compare instruction for sure (PALcode?) */
+#  define LZS_MEMCMP_THRESHOLD 0
+# endif /* defined(__alpha__) */
+# if defined(__ppc__)
+/* With GCC on ppc, memcmp wins over C at lengths of 16 */
+#  define LZS_MEMCMP_THRESHOLD 16
+# endif /* defined(__ppc__) */
 #endif /* defined(__GNUC__) */
 
 /* Some words about the implementation of the compressor:
    I started with brute force. This was - as expected - too slow for
    any realworld use, the only chance to get it somewhat useful was
    to limit search in a restrictive way. I then posted a question on
-   how to implement LZS efficient in ISO C in comp.compression. As
+   how to implement LZS efficient in ISO C to comp.compression. As
    there were no immediate answers, I digged a bit on my own and found
    out that gzip/zlib (aka "deflate") uses a hash table in its LZ77
    stage. They generate hash chains from every 3-byte-match in the
@@ -315,6 +342,7 @@
  u8 comp:1;			/* Flag: is this a compressor ? */
  u8 lastinc:1;			/* Flag: was the last frame incompressible ? */
  u8 ackrs:1;			/* Flag: ack a reset request inband (EXT) */
+ int lastvjci;			/* last VJ conn idx for trivial multihist */
  struct compstat stats;		/* statistics sink */
  /* more to come */
 } LZSState;
@@ -389,7 +417,7 @@
   if(comp) {
    /* Initialize next buffer and hash table to 0 (hist doesn't need this) */
    memset(hv[i].next, 0, sizeof(u32) * LZS_HISTORY_SIZE);
-   memset(hv[i].hashtab, 0, sizeof(32) * LZS_HASHTAB_SIZE);
+   memset(hv[i].hashtab, 0, sizeof(u32) * LZS_HASHTAB_SIZE);
    /* Initialize history head to 2048 (so 0 is out of scope) */
    hv[i].head = LZS_HISTORY_SIZE;
   }
@@ -664,8 +692,11 @@
  }
  
  s->cmode = cmode;
+ s->lastvjci = 256;
 
- MOD_INC_USE_COUNT;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+   MOD_INC_USE_COUNT;
+#endif
 
  return s;
 } 
@@ -684,7 +715,9 @@
    printk(KERN_DEBUG "lzsFree: freeing state\n");
   kfree(s);
 
-  MOD_DEC_USE_COUNT;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+    MOD_DEC_USE_COUNT;
+#endif
 
  }
 }
@@ -711,6 +744,76 @@
 
 /* Compression stuff starts here, helper functions first */
 
+#ifdef LZS_COMP_MULTIHIST
+
+/* From proto and the skb, decide which of the histories supported by
+   state s is to be used for this packet. */
+static u16 selectCompHist(LZSState *s, struct sk_buff *skb, int proto)
+{
+ /* We use history 1 for a default */
+ u16 hi = 1;
+ int thists;
+
+ /* Are we multihistory at all? */
+ if(s->h->nhists == 1)
+  return 1;
+
+ /* First try: We simply reuse the work already done by VJ. Anything that
+    is not a VJ compressed or VJ uncompressed frame is just dumped on
+    history 1. The VJ frames are stuffed into histories according to
+    their VJ connection index, modulo the number of histories. */
+
+ /* Get the number of histories we use for TCP connections */
+ thists = s->h->nhists - 1;
+
+ /* Now deal with proto */
+ switch(proto) {
+  case PPP_VJC_UNCOMP:
+   /* Within a VJ uncompressed frame, the connection index is to be found
+      in the protocol field of the otherwise unchanged IP header. We just
+      pull it there. */
+   if(skb->len < 10)
+    return 1;
+   hi = skb->data[9];
+   if(debug > 1)
+    printk(KERN_DEBUG "lzsCompMultiHist: VJ uncomp frame ci %d ", hi);
+   break;
+ case PPP_VJC_COMP:
+  /* In a VJ compressed frame, the connection index is either compressed,
+     meaning it is the same as with the last frame, or it is explicitely
+     sent. */
+  if(skb->len < 3)
+   return 1;
+  /* Is there a connection index present? */
+  if(skb->data[0] & 0x40) {
+   hi = skb->data[1];
+   s->lastvjci = hi;
+   printk(KERN_DEBUG "lzsCompMultiHist: VJ comp frame new ci %d ", hi);
+  } else {
+   /* No, check whether we know an earlier one */
+   if(s->lastvjci == 256)
+    return 1;
+   /* We do, so just use it */
+   hi = s->lastvjci;
+   printk(KERN_DEBUG "lzsCompMultiHist: VJ comp frame old ci %d ", hi);
+  }
+  break;
+ default:
+  /* All other protos just drop into history 1 */
+  return 1;
+ }
+
+ /* Shift the history number into the range we can support */
+ hi %= thists;
+ hi += 2;
+ if(debug > 1)
+  printk(KERN_DEBUG "--> hist %d\n", hi);
+
+ return hi;
+}
+
+#endif /* LZS_COMP_MULTIHIST */
+
 /* An index is valid if it is in the current range of the history */
 static int __inline validIndex(LZSHist *h, u32 ix)
 {
@@ -918,6 +1021,7 @@
  return len;
 }
 
+
 static int lzsCompress(void *state, struct sk_buff *skbin,
 		       struct sk_buff *skbout, int proto)
 {
@@ -926,7 +1030,7 @@
  register LZSState *s = (LZSState *)state;
  register LZSHist *h;
 
- u16 hi = 0;
+ u16 hi = 1;
  u8 *p;
  register int llen, nlen, retry;
  register u32 hidx, lidx, next;
@@ -953,15 +1057,7 @@
   return 0;
  }
 
- /* Step 1 - verify the output skb is large enough to eat our output. We
-    just statically verify that the tailroom can stand the maximum ex-
-    pansion of the input data. */
- if(skb_tailroom(skbout) < ((skbin->len + 4) + ((skbin->len + 2)>>3))) {
-  printk(KERN_WARNING "lzsComp: out skb tailroom too small\n");
-  return 0;
- }
-
- /* Step 2 - verify the output skb can receive the data we need to pre-
+ /* Step 1 - verify the output skb can receive the data we need to pre-
     pend to the compressed stuff. */
  ohlen = 0;
  switch(s->hmode) {
@@ -973,6 +1069,7 @@
   break;
  default:
   /* Nothing to do - history is not sent explicitly */
+  break; /* <-- for GCCv3's personal satisfaction */
  }
 
  switch(s->cmode) {
@@ -994,14 +1091,38 @@
   printk(KERN_WARNING "lzsComp: cmode %d NYI (sending as is)\n", s->cmode);
   return 0;
  }
- 
- if(skb_headroom(skbout) < ohlen) {
-  printk(KERN_WARNING "lzsComp: out skb headroom insufficient\n");
+
+ /* It appears newer versions of the I4L system are upset when the headroom
+    of skbs they pass to us is reduced. Therefore, we reserve the headroom
+    we will need so we don't touch theirs */
+
+ if(ohlen) {
+  if(skb_tailroom(skbout) < ohlen) {
+   printk(KERN_WARNING "lzsComp: out skb headroom cannot be reserved\n");
+   return 0;
+  }
+  skb_reserve(skbout, ohlen);
+ }
+
+ /* Step 2 - verify the output skb is large enough to eat our output. We
+    just statically verify that the tailroom can stand the maximum ex-
+    pansion of the input data. */
+ if(skb_tailroom(skbout) < ((skbin->len + 4) + ((skbin->len + 2)>>3))) {
+  printk(KERN_WARNING "lzsComp: out skb tailroom too small\n");
   return 0;
  }
 
- /* Step 3 - initialize some values for compression */
- hi = 1;
+ /* Step 3 - initialize some values for compression. First of all, find
+    the history we compress against. */
+
+#ifdef LZS_COMP_MULTIHIST
+ if(s->hmode == LZS_HMODE_MANY) {
+  /* Check whether it would make sense to use another hist but the default
+     of 1 */
+  hi = selectCompHist(s, skbin, proto);
+ }
+#endif
+
  h = &s->h->hists[hi - 1];
  s->word = s->left = 0;
 
@@ -1286,9 +1407,15 @@
   return 0;
  }
 
- if(debug > 1)
-  printk(KERN_DEBUG "lzsComp: %d in %d out - sending compressed\n",
-	 skbin->len, skbout->len);
+ if(debug > 1) {
+  if(uncomp) {
+   printk(KERN_DEBUG "lzsComp: %d in %d out - EXT uncompressed\n",
+	  skbin->len, skbout->len);
+  } else {
+   printk(KERN_DEBUG "lzsComp: %d in %d out - sending compressed\n",
+	  skbin->len, skbout->len);
+  }
+ }
  if(debug > 2) {
   printk(KERN_DEBUG "lzsComp packet in:\n");
   
@@ -1795,7 +1922,7 @@
   s->ccnt &= 0x0fff;
   if(!(ccnt & 0x2000)) {
    /* Bit C indicates the frame is not compressed - push it out */
-   if(debug)
+   if(debug > 1)
     printk(KERN_DEBUG "lzsDecomp: uncompressed frame passed through\n");
    if(skb_tailroom(skbout) >= s->inlen) {
     memcpy(skb_put(skbout, s->inlen), s->inbuf, s->inlen);
@@ -1861,6 +1988,11 @@
   }
  }
 
+ /* Makes things more symmetric */
+ if(debug > 1)
+  printk(KERN_DEBUG "lzsDecomp: %d in %d out - decompressed\n",
+         skbin->len, skbout->len); 
+
  if(debug > 2) {
   printk(KERN_DEBUG "lzsDecomp packet in:\n");
   
@@ -1912,23 +2044,27 @@
  */
 
 static struct isdn_ppp_compressor ippp_lzs_compress = {
- NULL,NULL,		/* prev,next: overwritten by isdn_ppp */
- CI_LZS_COMPRESS,	/* CCP proto for PPP */
- lzsAlloc,		/* Alloc new state */
- lzsFree,		/* Drop state */
- lzsInit,		/* Initialize state */
- lzsReset,		/* Reset state */
- lzsCompress,		/* Do the shrink */
- lzsDecompress,		/* Do the other thing */
- lzsIncomp,		/* Handle incompressible frame */
- lzsStats		/* Get stats */
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
+ .owner		= THIS_MODULE,		/* 2.6 */
+#endif
+
+ .num		= CI_LZS_COMPRESS,	/* CCP proto for PPP */
+ .alloc		= lzsAlloc,		/* Alloc new state */
+ .free		= lzsFree,		/* Drop state */
+ .init		= lzsInit,		/* Initialize state */
+ .reset		= lzsReset,		/* Reset state */
+ .compress	= lzsCompress,		/* Do the shrink */
+ .decompress	= lzsDecompress,       	/* Do the other thing */
+ .incomp	= lzsIncomp,		/* Handle incompressible frame */
+ .stat		= lzsStats,		/* Get stats */
 };
 
 /*
  * Module init: Register myself with the compressor list
  */
 
-int init_module(void)
+static int isdn_lzscomp_init(void)
 {
  int a = isdn_ppp_register_compressor (&ippp_lzs_compress);
  if (!a) {
@@ -1945,7 +2081,10 @@
  * Module fini: Clear my traces
  */
 
-void cleanup_module(void)
+void isdn_lzscomp_exit(void)
 {
 	isdn_ppp_unregister_compressor (&ippp_lzs_compress);
 }
+
+module_init(isdn_lzscomp_init);
+module_exit(isdn_lzscomp_exit);
diff -urN isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/isdn_lzscomp.h isdnutils-3.9.20060704+dfsg.3/ipppcomp/isdn_lzscomp.h
--- isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/isdn_lzscomp.h	1998-10-16 14:37:38.000000000 +0200
+++ isdnutils-3.9.20060704+dfsg.3/ipppcomp/isdn_lzscomp.h	2012-03-06 13:40:13.000000000 +0100
@@ -1,10 +1,12 @@
-/*
- * $Id: isdn_lzscomp.h,v 1.1 1998/10/16 12:37:38 keil Exp $
+/* $Id: isdn_lzscomp.h,v 1.1.4.1 2001/11/20 14:19:38 kai Exp $
  *
  * Header for isdn_lzscomp.c
  * Concentrated here to not mess up half a dozen kernel headers with code
  * snippets
  *
+ * This software may be used and distributed according to the terms
+ * of the GNU General Public License, incorporated herein by reference.
+ *
  */
 
 #define CI_LZS_COMPRESS		17
@@ -16,7 +18,7 @@
 #define LZS_CMODE_SEQNO		3	/* MUST be implemented (default) */
 #define LZS_CMODE_EXT		4	/* Seems to be what Win0.95 uses */
 
-#define LZS_COMP_MAX_HISTS	1	/* Don't waste peers ressources */
+#define LZS_COMP_MAX_HISTS	32	/* For two-way MultiHistory */
 #define LZS_COMP_DEF_HISTS	1	/* Most likely to negotiate */
 #define LZS_DECOMP_MAX_HISTS	32	/* More is really nonsense */
 #define LZS_DECOMP_DEF_HISTS	8	/* If we get it, this may be optimal */
diff -urN isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/README.LZS isdnutils-3.9.20060704+dfsg.3/ipppcomp/README.LZS
--- isdnutils-3.9.20060704+dfsg.3.orig/ipppcomp/README.LZS	1999-06-21 15:28:31.000000000 +0200
+++ isdnutils-3.9.20060704+dfsg.3/ipppcomp/README.LZS	2012-03-06 13:40:04.000000000 +0100
@@ -1,16 +1,12 @@
 
-# $Id: README.LZS,v 1.4 1999/06/21 13:28:31 hipp Exp $
-
-*** ALPHA *** ALPHA *** ALPHA *** ALPHA *** ALPHA *** ALPHA *** ALPHA ***
-
+# $Id: README,v 1.4 2001/10/11 16:52:22 beck Exp $
 
      LZS (aka Stac aka HiFn) compression support for I4L SyncPPP
 
-
-Some months ago I picked up a question in the de.alt.isdn4linux newsgroup
-asking "Is there Stac compression support for I4L ?". Due to a strange
-coincidence, I had found out before on this same day that RFC1974 is a
-somewhat complete documentation of the LZS CCP stuff and contains enough
+Sometime in 1998 I picked up a question in the de.alt.comm.isdn4linux
+newsgroup asking "Is there Stac compression support for I4L ?". Due to a
+strange coincidence, I had found out before on this same day that RFC1974
+is a somewhat complete documentation of the LZS CCP stuff and contains enough
 information to code a decompressor and compressor. Thus I answered the
 question like "a decompressor requires only some effort, a compressor
 is somewhat more complicated but clearly possible". At this time the real
@@ -21,46 +17,122 @@
 decompressor and eventually code a compressor, too.
 
 
-                            STATUS
+                            LICENSE
+
+The code is Copyleft 1998-2001 by Andre Beck under terms of the
+GNU GPL. While the code is provided free and under GPL, it may infringe
+patents Stac has applied for in the US and maybe other countries. Verify
+that this is not the case in your country before using it. This code is a
+private development related in no way whatsoever to my employer, written in
+Germany where software patents are still considered bogus. This
+situation might change any day due to EU law. Linux distributors who
+supply this stuff shrink wrapped should reconsider doing this (not only
+for isdn_lzscomp, but as well for isdn_bsdcomp, which is likely to
+infringe on the infamous Unisys LZW patent) with their law departement.
+See also the PATENT ISSUES section.
 
 
-This code is very early alpha. The LZS compressor itself is quite complete
-IMHO, but we had to expand and change some portions of isdn_ppp, mainly
-those dealing with Reset Requests and -Acks. This code is raw and not yet
-finished, primarily because I didn't want to hack around in isdn_ppp but
-just wanted to write the LZS module. But LZS CCP is more complicated than
-most other CCP engines and required those changes. I hope someone with more
-insight into isdn_ppp will adopt and complete them. The API to the com-
-pressor could also get a general facelift, but one thing after the other.
+                            STATUS
 
+After three years without a lot of changes, the code should still be
+considered beta. There are two different things here, the actual LZS
+implementation (isdn_lzscomp.c) and the CCP framework (to be found in
+isdn_ppp.c) in conjunction with the necessary changes to ipppd.
+
+a) The compression module
+   The module appears to be working well. It could still get some reworks
+   (last but not least some comments are outdated and contrary to the
+   actual code), though. One of the things to be reworked is the does-or-
+   does-not-compress heuristics. Some code is already there, but not
+   enabled yet asl long as there is no clear API for the module to know
+   the MTU of the frames it can generate. Another potential improvement
+   would be to change the default for tweaks to no tweaks at all - but
+   then again, it's a lot of Ascends out there. If there would ever be
+   more peers supporting multihistory LZS, trying a basic multihistory
+   extension to the compressor would be quite interesting, but at the
+   moment it appears mostly useless.
+
+b) ipppd
+   The changes to ipppd have settled since the first implementation,
+   the version of ipppd in current distributions already contains them.
+   I had supplied patches later that disabled CCP per default, but I'm
+   not sure whether they made it everywhere. The code generally works,
+   but it is known not to be flawless. Primarily, it doesn't gracefully
+   terminate when the peer is rejecting our CCP ConfReqs, nor does it
+   try other parameters that may be supported by the peer. It could be
+   improved, ideally by querying for multihistory SEQ mode first, then
+   falling back to single history SEQ and then trying EXT, with a proper
+   bailout of CCP if all of them fail.
+
+c) The CCP framework
+   That's the most unstable part of the whole thing. We had to expand and
+   change some portions of isdn_ppp, mainly those dealing with Reset
+   Requests and -Acks. This code is raw and not really finished, primarily
+   because I didn't want to hack around in isdn_ppp but just wanted to write
+   the LZS module. But LZS CCP is more complicated than most other CCP
+   engines and required those changes. I hope someone with more
+   insight into isdn_ppp will adopt and complete them.
+   - The state engine that generates and deals with ResetReqs and -Acks
+     is quite a hack. I am not sure about it's fitting into the kernel
+     parallelism aspects.
+   - The code is trying to deal with both, the normal (bundle) and the
+     link compression variants of CCP. The latter is normally not used,
+     and still completely untested (and expected to fail).
+
+As a conclusion, the more betaish aspect of the whole thing is the CCP
+framework with which you have to deal if you try any CCP module. For LZS,
+the module is somewhat well tested and seems to not have obvious bugs,
+though some deficiencies. Interaction with MP in newer kernels seems to
+be rather flakey at least in EXT mode. If you don't need MP, disable it
+in ipppd removing "+mp" from the config options. We're working on it.
 
-                           INSTALL
 
+                           BUILDING
 
 The easiest way to build the module is to copy isdn_lzscomp.c to
 linux/drivers/isdn/ and to edit the Makefile in this directory, adding
-a line for LZS like:
-
-      ifdef CONFIG_ISDN_PPP
-        O_OBJS += isdn_ppp.o
-        M_OBJS += isdn_bsdcomp.o
-+       M_OBJS += isdn_lzscomp.o
-      endif
-
-The module will be built on the next "make modules". If you want to use
-any CCP method with I4L, you must first load the relevant module(s). Then
+a line for LZS. The structure of the kernel Makefiles has changed over
+the years, so this is best done using the patch provided by Frank Elsner
+for most kernel versions. The patch even includes changes to the kernel
+configuration help and config file, so building the code can be triggered
+with whatever config frontend you like.
+
+The module will be built on the next "make modules" and installed with
+"make modules_install", or the distribution dependent mechanisms that
+replace that (like Debian make-kpkg and dpkg). But if you want, you still
+can build the module standalone and copy it wherever you see fit, but deal
+with the oddities (aka MODVERSIONS) yourself.
+
+
+                            USAGE
+
+If you want to use any CCP method with I4L, you must first load the
+relevant module(s) explicitely into the kernel. This is best accomplished
+either when loading the basic isdn modules, or in the script that sets up
+the interfaces and ipppd for the connections. After loading the module(s)
 you start the connection. You may need to give options to ipppd in order
 to make sure negotiations succeed, see below.
 
 
                        Supported Modes
 
-
 This set of sources supports LZS check mode 3 (the default of RFC1974)
 and LZS check mode 4 (the derivative used by Micro$oft in Win0.95). If your
-peer is an Ascend Max, the correct options are "Stac-9" for mode 3 and
-"MS-Stac" for mode 4. Ask your ISP for what their NAS speaks. Either mode
-is Ok, but if you insist on non-M$, I'm virtually yours.
+peer is an Ascend Max, the techs of the ISP might use another nomenclature:
+
+What it is		Ascend NVRAM Menu	Ascend RADIUS
+
+RFC1974 LZS SEQ Mode	Stac-9 (named after	Link-Comp-Stac-Draft-9
+(check mode 3)          draft 9 of the RFC)
+
+RFC1974 LZS EXT Mode	MS-Stac			Link-Comp-MS-Stac
+(check mode 4)
+
+
+Ask your ISP for what their NAS speaks. Either mode is Ok, but if you
+insist on non-M$, I'm virtually yours. The compression deployed by german
+mass dialin provider T-Online in mid-2001 (beeing the reason for much
+increased usage of this code) is the EXT mode variant.
 
 Note: If your peer sends you CCP with the LZS identity (0x11) but a
       length of 6 bytes, it is not compatible with RFC1974 but uses
@@ -70,7 +142,9 @@
       your ISP about changing this, nobody (but other Ascend boxes)
       will ever be able to use this compression. Especially not Win95,
       if the ISP wants interoperability with Win95 he needs to set
-      MS-Stac, and then this module works as well.
+      MS-Stac, and then this module works as well. In a later patch
+      ipppd was modified to detect that variant of pre-RFC LZS and
+      name it correctly in the logs.
 
 If the NAS you are talking to will not negotiate gracefully you may want
 to wire the exact mode ipppd is requesting. For instance, an Ascend Max
@@ -100,52 +174,67 @@
 	lzs 1:4			Mode 4 with 1 hist in both directions. This
 				will negotiate against a Max at MS-Stac
 
-BTW, I don't know whether multi-history support works. I have no peer to
-test against. If your peer can send more than one history please inform
-me of the results. LZS4I4L cannot support more than one history in the
-compressor, at least not for some time to come.
+Multihistory is reported to work as expected by some users that found the
+occasional NAS supporting it at their ISP. There is only downstream support
+for multiple histories (improving significantly the overall compression
+ratio as soon as more than one flow is active on the same PPP link), to
+support it upstream would require nontrivial code extensions.
 
 
                         Module options
 
-
 When loading the isdn_lzscomp module, some options are available to tweak
 it for ones personal desires:
 
 	comp=n			n=0..9 [0]
 				Specifies the level of compression to be used.
-				The compressor is less complete compared to
-				the decompressor, play around with care.
+				By default, compression is switched off, so
+				only decompression (downstream) is available.
+				Increasing numbers increase the ratio that
+				can be reached as well as the CPU ressources
+				eaten up for that.
 
 				0:	No compression at all.
 				1:	Absolutely minimal compression.
 				...
 				7:	Good compression.
 				8:	Heavy compression.
-				9:	Best compression, but eats more
+				9:	Ultimate compression, but eats more
 					cycles than most CPUs can dream of.
 
 				If you want to try upstream compression,
-				start with 7. Try 9 only for fun.
+				start with 7. Try 9 only for fun, it is
+				rather useless (compresses only 1 or 2%
+				better than 8, but a P100 facing that
+				amount of brute force becomes sluggish,
+				jumping mouse etc) - just not worth the
+				burned CPU (even if you have a GHz oven).
 
 	debug=n			n=0..3
 				Increasing levels of debug messages from
 				the LZS code. 3 includes full packet dumps
 				before and after compression and decompression.
 				More than 1 is overkill if you don't hunt
-				bugs.
+				bugs. Even 1 has some rather informational
+				output. BTW, that doesn't control the
+				messages from the CCP framework.
 
 	tweak=n			n=tweak-flag-mask
 				Tweaks some aspects of the module to behave
 				strange or even violate RFCs in order to talk
 				to RFC-impaired peers. For Ascend, use 0x7.
 				If you want to know why, UTSL.
-
+				For historic reasons, the tweak parameter, if
+				left unspecified, defaults to 7 (the Ascend
+				tweaks). If your peer is something else, you
+				should therefore try tweak=0 to not upset the
+				peer with erratic behavior that is not en-
+				tirely wrong, but then again, is only right
+				if you are an Ascend box.
 
 
                         PATENT ISSUES (argh)
 
-
 Please check whether using this code constitutes a crime in your country.
 While I just implemented a module that can source and sink the data format
 described by Stac/HiFn in RFC1974, they claim to have US Patents on
@@ -164,38 +253,22 @@
 of Mozilla, they are probably not on the planet for good will games.
 We'll see.
 
-FMI, surf www.patents.ibm.com and search for "stac".
+FMI, surf http://www.delphion.com/ and search for "stac".
 
-                               BUGS
 
+                               BUGS
 
-I said it's ALPHA already, didn't I ? There are bugs for sure. Because
-this is a kernel module, chances are that they crash the whole system.
-I _have_ seen crashes. They mostly appeared when a connection severly
-hung due to non-working reset handling. Seems to be a NULL pointer de-
-reference is still hiding somewhere in isdn_ppp.c or even isdn_lzscomp.c.
-I've got the feeling those crashes occur when unloading isdn_lzscomp
-but dunno exactly. Then again, I've done large downloads and surfed the
-net for more than a hour without any problem. Your milage may vary.
-
-
-                               TODO
-
-
-- Cleanup MTU weirdness in the compressor
-- Implement the remaining modes from RFC1974 provided anyone finds a peer
-  NAS that speaks one of them. I don't expect that ever happens ;)
-- Thoroughly revise and clean up the changes done to isdn_ppp in order
-  to get in-kernel CCP reset handling. I assume the bug mentioned above
-  sits there.
-- Fix the bugs you find.
+Over the years, there have been some bugs tracked down and eliminated that
+tended to crash the whole thing (the kernel, that is, so beware). Another
+problem was introduced to the CCP framework in 2.4.0 and removed in 2.4.1.
+There are problem reports for 2.2.19 currently under investigation. I'm still
+running an older 2.2 version and don't have much reason to upgrade.
 
 
                                FMI
 
-
 The source code isdn_lzscomp.c is heavily commented (so I can still read it
-in a month). It contains a thorough description of the compression algo-
+in a month). It contains a thourough description of the compression algo-
 rithm used and how I came to it. This in turn involves Credits to the
 net.persons who helped me with getting that compressor faster. When we
 are at it:
@@ -224,12 +297,21 @@
 	for general tips and his website which was the first reading
 	I had about speeding up a compressor beyond brute force
 
+Frank Elsner
+	for creating a full-blown kernel patch out of the module source
+	and adapting it to all the changes that I had no time to follow,
+	as well as supplying it on his website and giving support on this
+	topic in Usenet and mailing lists.
+	http://www.tu-berlin.de/~elsner/ISDN/
 
-                             Contact
 
+                             Contact
 
 You can reach me by EMail: beck@ibh.de
-Discussion will take place at de.alt.comm.isdn4linux, the USENET mirror
-of the official I4L Mailing List.
-Check http://www.ibh-dd.de/~beck/stuff/lzs4i4l/ for new versions.
+URL: http://www.ibh.de/~beck/stuff/lzs4i4l/
+
+Discussion will take place at de.comp.os.unix.linux.isdn, which recently
+took over the remains of de.alt.comm.isdn4linux, the former Usenet mirror
+of the I4L mailing list.
+
 
diff -urN isdnutils-3.9.20060704+dfsg.3.orig/ipppd/options.c isdnutils-3.9.20060704+dfsg.3/ipppd/options.c
--- isdnutils-3.9.20060704+dfsg.3.orig/ipppd/options.c	2005-08-07 15:47:50.000000000 +0200
+++ isdnutils-3.9.20060704+dfsg.3/ipppd/options.c	2012-03-06 13:38:34.000000000 +0100
@@ -57,11 +57,7 @@
 
 #include <linux/ppp-comp.h>
 
-#ifdef HAVE_LZSCOMP_H
-#include <linux/isdn_lzscomp.h>
-#else
 #include "../ipppcomp/isdn_lzscomp.h"
-#endif
 
 #define FALSE	0
 #define TRUE	1
