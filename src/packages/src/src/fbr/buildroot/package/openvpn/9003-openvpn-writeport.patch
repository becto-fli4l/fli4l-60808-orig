diff -purN openvpn-2.4.0.orig/src/openvpn/init.c openvpn-2.4.0/src/openvpn/init.c
--- openvpn-2.4.0.orig/src/openvpn/init.c	2017-08-30 21:34:31.049189430 +0200
+++ openvpn-2.4.0/src/openvpn/init.c	2017-08-30 21:35:21.542506490 +0200
@@ -3748,6 +3748,7 @@ open_management(struct context *c)
             if (management_open(management,
                                 c->options.management_addr,
                                 c->options.management_port,
+                                c->options.management_writeport,
                                 c->options.management_user_pass,
                                 c->options.management_client_user,
                                 c->options.management_client_group,
diff -purN openvpn-2.4.0.orig/src/openvpn/manage.c openvpn-2.4.0/src/openvpn/manage.c
--- openvpn-2.4.0.orig/src/openvpn/manage.c	2016-12-26 12:51:00.000000000 +0100
+++ openvpn-2.4.0/src/openvpn/manage.c	2017-08-30 21:51:11.577666349 +0200
@@ -1819,8 +1819,57 @@ man_listen(struct management *man)
         }
         else
 #endif
-        msg(D_MANAGEMENT, "MANAGEMENT: TCP Socket listening on %s",
-            print_sockaddr(man->settings.local->ai_addr, &gc));
+        {
+            msg(D_MANAGEMENT, "MANAGEMENT: TCP Socket listening on %s",
+                print_sockaddr(man->settings.local->ai_addr, &gc));
+
+            if (man->settings.writeport_file_name)
+            {
+                man->settings.writeport_file_fd = open(man->settings.writeport_file_name,
+                                                       O_CREAT|O_WRONLY);
+                if (-1 != man->settings.writeport_file_fd)
+                {
+                    man->settings.writeport_file_lock.l_type   = F_WRLCK;     /* F_RDLCK, F_WRLCK, F_UNLCK */
+                    man->settings.writeport_file_lock.l_start  = 0L;          /* byte offset relative to l_whence */
+                    man->settings.writeport_file_lock.l_whence = SEEK_SET;    /* SEEK_SET, SEEK_CUR, SEEK_END */
+                    man->settings.writeport_file_lock.l_len    = 0L;          /* #bytes (0 means to EOF) */
+                    if (-1 != fcntl(man->settings.writeport_file_fd, F_SETLK,
+                                    &man->settings.writeport_file_lock))
+                    {
+                        int port = ((struct sockaddr_in *)man->settings.local->ai_addr)->sin_port;
+                        if (0 == port)
+                        {
+                            struct sockaddr_in tmpSockAddr;
+                            socklen_t tmpSockAddrBufSize = sizeof(tmpSockAddr);
+
+                            if(getsockname(man->connection.sd_top,
+                                           (struct sockaddr *)&tmpSockAddr,
+                                           &tmpSockAddrBufSize))
+                            {
+                                msg(M_ERR, "getsockname failed");
+                                port = -1;
+                            }
+                            else
+                                port = tmpSockAddr.sin_port;
+                        }
+
+                        struct buffer out = alloc_buf_gc(32, &gc);
+                        buf_printf(&out, "%d\n", ntohs(port));
+                        buf_write_string_file(&out,
+                                              man->settings.writeport_file_name,
+                                              man->settings.writeport_file_fd);
+                    }
+                    else
+                    {
+                        msg(D_MANAGEMENT, "MANAGEMENT: fcntl file is locked");
+                    }
+                }
+                else
+                {
+                  msg(M_ERR, "Open error on file %s", man->settings.writeport_file_name);
+                }
+            }
+        }
     }
 
 #ifdef _WIN32
@@ -2368,6 +2417,7 @@ static void
 man_settings_init(struct man_settings *ms,
                   const char *addr,
                   const char *port,
+                  const char *writeport_file,
                   const char *pass_file,
                   const char *client_user,
                   const char *client_group,
@@ -2387,6 +2437,19 @@ man_settings_init(struct man_settings *m
         ms->client_gid = -1;
 
         /*
+         * Save writeport filename
+         */
+        ms->writeport_file_fd = -1;
+        if (writeport_file)
+        {
+            ms->writeport_file_name = string_alloc(writeport_file, NULL);
+        }
+        else
+        {
+            ms->writeport_file_name = NULL;
+        }
+
+        /*
          * Get username/password
          */
         if (pass_file)
@@ -2475,6 +2538,12 @@ man_settings_init(struct man_settings *m
 static void
 man_settings_close(struct man_settings *ms)
 {
+    ms->writeport_file_lock.l_type = F_UNLCK;
+    fcntl(ms->writeport_file_fd, F_SETLK, &ms->writeport_file_lock);
+    close(ms->writeport_file_fd);
+    unlink(ms->writeport_file_name);
+    free(ms->writeport_file_name);
+
     if (ms->local)
     {
         freeaddrinfo(ms->local);
@@ -2585,6 +2654,7 @@ bool
 management_open(struct management *man,
                 const char *addr,
                 const char *port,
+                const char *writeport_file,
                 const char *pass_file,
                 const char *client_user,
                 const char *client_group,
@@ -2604,6 +2674,7 @@ management_open(struct management *man,
     man_settings_init(&man->settings,
                       addr,
                       port,
+                      writeport_file,
                       pass_file,
                       client_user,
                       client_group,
diff -purN openvpn-2.4.0.orig/src/openvpn/manage.h openvpn-2.4.0/src/openvpn/manage.h
--- openvpn-2.4.0.orig/src/openvpn/manage.h	2016-12-26 12:51:00.000000000 +0100
+++ openvpn-2.4.0/src/openvpn/manage.h	2017-08-30 21:44:16.759278710 +0200
@@ -243,6 +243,9 @@ struct man_settings {
 #define MANSIG_MAP_USR1_TO_HUP  (1<<1)
 #define MANSIG_MAP_USR1_TO_TERM (1<<2)
     unsigned int mansig;
+    char *writeport_file_name;
+    int writeport_file_fd;
+    struct flock writeport_file_lock;
 };
 
 /* up_query modes */
@@ -359,6 +362,7 @@ struct management *management_init(void)
 bool management_open(struct management *man,
                      const char *addr,
                      const char *port,
+                     const char *writeport_file,
                      const char *pass_file,
                      const char *client_user,
                      const char *client_group,
diff -purN openvpn-2.4.0.orig/src/openvpn/options.c openvpn-2.4.0/src/openvpn/options.c
--- openvpn-2.4.0.orig/src/openvpn/options.c	2017-08-30 21:33:17.082189335 +0200
+++ openvpn-2.4.0/src/openvpn/options.c	2017-08-30 21:45:26.031342814 +0200
@@ -39,6 +39,7 @@
 
 #include "syshead.h"
 
+#include "forward.h"
 #include "buffer.h"
 #include "error.h"
 #include "common.h"
@@ -381,6 +382,8 @@ static const char usage_message[] =
     "--management-up-down : Report tunnel up/down events to management interface.\n"
     "--management-log-cache n : Cache n lines of log file history for usage\n"
     "                  by the management channel.\n"
+    "--management-writeport file : Write used port for management interface\n"
+    "                  to file.\n"
 #if UNIX_SOCK_SUPPORT
     "--management-client-user u  : When management interface is a unix socket, only\n"
     "                              allow connections from user u.\n"
@@ -1681,6 +1684,7 @@ show_settings(const struct options *o)
 #ifdef ENABLE_MANAGEMENT
     SHOW_STR(management_addr);
     SHOW_STR(management_port);
+    SHOW_STR(management_writeport);
     SHOW_STR(management_user_pass);
     SHOW_INT(management_log_history_cache);
     SHOW_INT(management_echo_buffer_size);
@@ -2160,6 +2164,10 @@ options_postprocess_verify_ce(const stru
     {
         msg(M_USAGE, "--management-client-(user|group) can only be used on unix domain sockets");
     }
+    if (options->management_port == 0 && !options->management_writeport)
+    {
+        msg(M_USAGE, "--management ip port [pass] uses port=0 to auto-select the management port but there is no --management-writeport option to record the used port");
+    }
 #endif
 
     /*
@@ -5104,6 +5112,11 @@ add_option(struct options *options,
         options->management_flags |= MF_CONNECT_AS_CLIENT;
         options->management_write_peer_info_file = p[1];
     }
+  else if (streq (p[0], "management-writeport") && p[1])
+    {
+      VERIFY_PERMISSION (OPT_P_GENERAL);
+      options->management_writeport = p[1];
+    }
 #ifdef MANAGMENT_EXTERNAL_KEY
     else if (streq(p[0], "management-external-key") && !p[1])
     {
diff -purN openvpn-2.4.0.orig/src/openvpn/options.h openvpn-2.4.0/src/openvpn/options.h
--- openvpn-2.4.0.orig/src/openvpn/options.h	2016-12-26 12:51:00.000000000 +0100
+++ openvpn-2.4.0/src/openvpn/options.h	2017-08-30 21:47:57.764290936 +0200
@@ -350,6 +350,7 @@ struct options
 #ifdef ENABLE_MANAGEMENT
     const char *management_addr;
     const char *management_port;
+    const char *management_writeport;
     const char *management_user_pass;
     int management_log_history_cache;
     int management_echo_buffer_size;
