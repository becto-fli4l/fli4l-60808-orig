##-----------------------------------------------------------------------------
## fli4l __FLI4LVER__ - configuration for package "pppoe"
##
##  P L E A S E  R E A D  T H E  D O C U M E N T A T I O N !
##
##  B I T T E  U N B E D I N G T  D I E  D O K U M E N T A T I O N  L E S E N !
##
##-----------------------------------------------------------------------------
## Creation:     26.06.2001  fm
## Last Update:  $Id$
##
## Copyright (c) 2001-2014 - Frank Meyer, fli4l-Team <team@fli4l.de>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##-----------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Optional package: PPPoE
#------------------------------------------------------------------------------
#OPT_PPP_ETHERNET='no'          # use PPP over ethernet: yes or no

#
# put these into circuits.txt
#

# Example 1: IPv4 DSL
#
#CIRC_1_NAME='DSL-IPv4'         # circuit name, don't use spaces
#CIRC_1_TYPE='ppp'              # this is a PPP circuit...
#CIRC_1_PPP_TYPE='ethernet'     # ...routed over Ethernet (PPPoE)
#CIRC_1_ENABLED='yes'           # the circuit is enabled
#CIRC_1_CLASS_N='1'             # set meaningful classes
#CIRC_1_CLASS_1='internet'
#CIRC_1_PPP_ETHERNET_DEV='eth1' # eth dev connected to ADSL modem,
                                # e.g. 2nd or an ethernet based
                                # bridge, e.g. br0
#CIRC_1_PPP_ETHERNET_TYPE='kernel'
                                # daemon or kernel (the latter is more
                                # efficient and the default if you do not
                                # define this variable)
#CIRC_1_PPP_USERID='anonymer'   # username
#CIRC_1_PPP_PASSWORD='surfer'   # password
#CIRC_1_PPP_FILTER='yes'        # filter traffic to be able to hangup
                                # even if someone is trying to scan us
#CIRC_1_PPP_FILTER_EXPR=''      # the filter to use; leave empty to use
                                # the default filter
#CIRC_1_PPP_VJ='yes'            # try Van Jacobson TCPv4 header compression
#CIRC_1_NETS_IPV4_N='1'
#CIRC_1_NETS_IPV4_1='0.0.0.0/0' # use default IPv4 route over this circuit
#CIRC_1_DEBUG='no'              # enable pppd debugging, 'yes' or 'no'
#CIRC_1_USEPEERDNS='yes'        # use dns server of your provider: yes or no
#CIRC_1_HUP_TIMEOUT='600'       # idle time after which to hangup
                                # (zero means no idle timeout); a non-zero
                                # value makes this circuit a dial-on-demand
                                # circuit such that a connection to the
                                # provider is only established if data is
                                # actually passed through the DSL interface
#CIRC_1_CHARGEINT='60'          # value of charge interval (in seconds)
#CIRC_1_UP='yes'                # activate at boot time (OPT_IMOND='no')
#CIRC_1_TIMES='Mo-Su:00-24:0.0:Y'
                                # times/charges when LCR (OPT_IMOND='yes')

# Example 2: IPv6 DSL (requires OPT_IPV6='yes')
#
# Note that most (if not all) IPv6 DSL connections need a DHCPv6 circuit on top
# of the PPPoE circuit, so you'll have to configure the dhcp_client package
# accordingly (make the DHCPv6 circuit depend on 'DSL-IPv6')!
#
#CIRC_2_NAME='DSL-IPv6'         # circuit name, don't use spaces
#CIRC_2_TYPE='ppp'              # this is a PPP circuit...
#CIRC_2_PPP_TYPE='ethernet'     # ...routed over Ethernet (PPPoE)
#CIRC_2_ENABLED='yes'           # the circuit is enabled
#CIRC_2_CLASS_N='1'             # set meaningful classes
#CIRC_2_CLASS_1='internet'
#CIRC_2_PPP_ETHERNET_DEV='eth1' # eth dev connected to ADSL modem,
                                # e.g. 2nd or an ethernet based
                                # bridge, e.g. br0
#CIRC_2_PPP_ETHERNET_TYPE='kernel'
                                # daemon or kernel (the latter is more
                                # efficient and the default if you do not
                                # define this variable)
#CIRC_2_PPP_USERID='anonymer'   # username
#CIRC_2_PPP_PASSWORD='surfer'   # password
#CIRC_2_PPP_FILTER='yes'        # filter traffic to be able to hangup
                                # even if someone is trying to scan us
#CIRC_2_NETS_IPV6_N='1'
#CIRC_2_NETS_IPV6_1='::/0'      # use default IPv6 route over this circuit
#CIRC_2_DEBUG='no'              # enable pppd debugging, 'yes' or 'no'
#CIRC_2_USEPEERDNS='yes'        # use dns server of your provider: yes or no
#CIRC_2_HUP_TIMEOUT='0'         # idle time after which to hangup
                                # (zero means no idle timeout)
#CIRC_2_CHARGEINT='60'          # value of charge interval (in seconds)
#CIRC_2_UP='yes'                # activate at boot time (OPT_IMOND='no')
#CIRC_2_TIMES='Mo-Su:00-24:0.0:Y'
                                # times/charges when LCR (OPT_IMOND='yes')
#CIRC_2_WAIT='20'               # wait max. 20 seconds for an IP address to
                                # be assigned before continuing the boot
                                # process; if '0' (the default), the boot
                                # process continues immediately

# Example 3: Dual-Stack IPv4/IPv6 DSL (requires OPT_IPV6='yes')
#
# Note that most (if not all) IPv6 DSL connections need a DHCPv6 circuit on top
# of the PPPoE circuit, so you'll have to configure the dhcp_client package
# accordingly!
#
#CIRC_3_NAME='DSL-DualStack'    # circuit name, don't use spaces
#CIRC_3_TYPE='ppp'              # this is a PPP circuit...
#CIRC_3_PPP_TYPE='ethernet'     # ...routed over Ethernet (PPPoE)
#CIRC_3_ENABLED='yes'           # the circuit is enabled
#CIRC_3_CLASS_N='1'             # set meaningful classes
#CIRC_3_CLASS_1='internet'
#CIRC_3_PPP_ETHERNET_DEV='eth1' # eth dev connected to ADSL modem,
                                # e.g. 2nd or an ethernet based
                                # bridge, e.g. br0
#CIRC_3_PPP_ETHERNET_TYPE='kernel'
                                # daemon or kernel (the latter is more
                                # efficient and the default if you do not
                                # define this variable)
#CIRC_3_PPP_USERID='anonymer'   # username
#CIRC_3_PPP_PASSWORD='surfer'   # password
#CIRC_3_PPP_FILTER='yes'        # filter traffic to be able to hangup
                                # even if someone is trying to scan us
#CIRC_3_PPP_VJ='yes'            # try Van Jacobson TCPv4 header compression
#CIRC_3_NETS_IPV4_N='1'
#CIRC_3_NETS_IPV4_1='0.0.0.0/0' # use default IPv4 route over this circuit
#CIRC_3_NETS_IPV6_N='1'
#CIRC_3_NETS_IPV6_1='::/0'      # use default IPv6 route over this circuit
#CIRC_3_DEBUG='no'              # enable pppd debugging, 'yes' or 'no'
#CIRC_3_USEPEERDNS='yes'        # use dns server of your provider: yes or no
#CIRC_3_HUP_TIMEOUT='0'         # idle time after which to hangup
                                # (zero means no idle timeout)
#CIRC_3_CHARGEINT='60'          # value of charge interval (in seconds)
#CIRC_3_UP='yes'                # activate at boot time (OPT_IMOND='no')
#CIRC_3_TIMES='Mo-Su:00-24:0.0:Y'
                                # times/charges when LCR (OPT_IMOND='yes')
#CIRC_3_WAIT='20'               # wait max. 20 seconds for an IP address to
                                # be assigned before continuing the boot
                                # process; if '0' (the default), the boot
                                # process continues immediately

# Example 4: PPPoE server
#
#CIRC_4_NAME='pppoe-server'     # circuit name, don't use spaces
#CIRC_4_TYPE='ppp'              # this is a PPP circuit...
#CIRC_4_PPP_TYPE='ethernet-server'
                                # ...routed over Ethernet (PPPoE)
#CIRC_4_ENABLED='yes'           # the circuit is enabled
#CIRC_4_PPP_ETHERNET_SERVER_DEV='eth0'
                                # Ethernet interface to use
#CIRC_4_PPP_ETHERNET_SERVER_TYPE='kernel'
                                # use kernel module
#CIRC_4_DEBUG='no'              # enable debugging, 'yes' or 'no'
#CIRC_4_PROTOCOLS='ipv4'        # run IPv4 over PPPoE connection
#CIRC_4_PPP_PEER_AUTH='yes'     # set to 'yes' if you want the peers
                                # to successfully authenticate; use
                                # OPT_PPP_PEERS for specifying
                                # credentials
#CIRC_4_PPP_USERID='user'       # use if the PPPoE clients wants us to
                                # successfully authenticate ourselves
#CIRC_4_PPP_PASSWORD='pass'     # see above
#CIRC_4_PPP_LOCALIP='10.0.0.1'  # sets the local IP address
#CIRC_4_PPP_REMOTEIP='10.54.0.1'
                                # sets the starting remote IP address
#CIRC_4_PPP_DNS1='192.168.6.1'  # IP of 1st DNS server passed to peer
#CIRC_4_PPP_DNS2='141.1.1.1'    # IP of 2nd DNS server passed to peer
#CIRC_4_PPP_MTU='1492'          # MTU to be used (defaults to 1492)
#CIRC_4_PPP_MRU='1492'          # MRU to be used (defaults to 1492)
#CIRC_4_UP='yes'                # activate at boot time (OPT_IMOND='no')
#CIRC_4_TIMES='Mo-Su:00-24:0.0:Y'
                                # times/charges when LCR (OPT_IMOND='yes')
